LSCModelInputs$LSCGSlope <- II$GSlope[i]/100.0
LSCModelInputs$LSCGCurve1 <- 0
LSCModelInputs$LSCDRLevel <- II$DRLevel[i]/100.0
LSCModelInputs$LSCDRSlope <- II$DRSlope[i]/100.0
LSCModelInputs$LSCDRCurve1 <- 0
LSCModelInputs$LSCScalarG <- II$ScalarG[i]
LSCModelInputs$LSCScalarDR <- II$ScalarDR[i]
II$PriceTest[i] <- LSCInstrumentValueGDR(LSCModelInputs)
II$NDeltaLg[i] <- LSCNDeltaLg(LSCModelInputs)/10000 # In basis points
II$NElastLg[i] <- 10000 * II$NDeltaLg[i] * (LSCModelInputs$LSCGLevel /
II$PriceTest[i])
II$DeltaLg[i] <- LSCDeltaLg(LSCModelInputs)/10000 # In percent
II$NDeltaLf[i] <- LSCNDeltaLf(LSCModelInputs)/10000 # In percent
II$NElastLf[i] <- 10000 * II$NDeltaLf[i] * (LSCModelInputs$LSCDRLevel /
II$PriceTest[i])
II$DeltaLf[i] <- LSCDeltaLf(LSCModelInputs)/10000 # In percent
II$NDeltaSg[i] <- LSCNDeltaSg(LSCModelInputs)/10000 # In percent
II$NElastSg[i] <- 10000 * II$NDeltaSg[i] * (LSCModelInputs$LSCGSlope /
II$PriceTest[i])
II$DeltaSg[i] <- LSCDeltaSg(LSCModelInputs)/10000 # In percent
II$NDeltaSf[i] <- LSCNDeltaSf(LSCModelInputs)/10000 # In percent
II$NElastSf[i] <- 10000 * II$NDeltaSf[i] * (LSCModelInputs$LSCDRSlope /
II$PriceTest[i])
II$DeltaSf[i] <- LSCDeltaSf(LSCModelInputs)/10000 # In percent
LSCModelInputs$LSCGLevel <- II$GLevel[i]/100.0 + 0.0001
II$DeltaLgTest[i] <- LSCInstrumentValueGDR(LSCModelInputs) - II$PriceTest[i]
}
Greeks <- II
keepCol <- c("Industry", "Ticker", "DeltaLg", "DeltaLf", "DeltaSg", "DeltaSf")
Greeks <- II[,keepCol]
wb <- createWorkbook("LSC Output Static Risk Measures.xlsx")
addWorksheet(wb, "First Derivatives")
writeData(wb, "First Derivatives", Greeks)
saveWorkbook(wb, file = "LSC Output Static Risk Measures.xlsx", overwrite = TRUE)
# #
# # Begin work on valuation impacts
# #  Paper Figure 1 Replication
# #
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
View(Greeks)
# #
# # Begin work on valuation impacts
# #  Paper Figure 1 Replication
# #
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# #
# # Begin work on valuation impacts
# #  Paper Figure 1 Replication
# #
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# #
# # Begin work on valuation impacts
# #  Paper Figure 1 Replication
# #
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# #
# # Begin work on valuation impacts
# #  Paper Figure 1 Replication
# #
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
# Global Outbreaks BATCH.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'Global Outbreaks Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
#
# Compute SRM and DRM of base model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Create multiple spreadsheets of different scenarios
#
#
# Static risk measures
#
source("Traditional Model Greeks.R")
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
#
# Begin work on valuation impacts
#  Paper Figure 1 Replication
#
source("Replication of Figure 1.R")
#
# Paper Figure 2 Replication (not possible due to errors)
#  Traditional Model (New method for handling growth and WACC)
#  Extended to LSC Model (Modified slope)
#
source("Replication of Figure 2 Both Methods.R")
# Global Outbreaks BATCH.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'Global Outbreaks Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
#
# Compute SRM and DRM of base model
#
source("LSC Model Calibration.R")
# LSC Model Calibration.R
# Import as data.frame each tab of data in input spreadsheet
# II - industry input data.frame
# MI - model inputs
II <- read.xlsx(xlsxFile = InputFileName, sheet = "Industry Inputs",
skipEmptyRows = FALSE)
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF: S&P 500 index
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Build LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
#
# Static risk measures
#
source("LSC Model Greeks.R")
source("LSC Model Bar Charts.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
