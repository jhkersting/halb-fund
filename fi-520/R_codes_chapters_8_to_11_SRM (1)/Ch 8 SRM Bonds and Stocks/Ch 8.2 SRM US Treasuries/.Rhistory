NumberOfFactors <- NFactors
Intercept <- 0
Slope <- 0
Curvature1 <- 0
Curvature2 <- 0
Curvature3 <- 0
Curvature4 <- 0
Curvature5 <- 0
Curvature6 <- 0
Intercept <- y[1]
if(NumberOfFactors>1)Slope <- y[2]
if(NumberOfFactors>2)Curvature1 <- y[3]
if(NumberOfFactors>3)Curvature2 <- y[4]
if(NumberOfFactors>4)Curvature3 <- y[5]
if(NumberOfFactors>5)Curvature4 <- y[6]
if(NumberOfFactors>6)Curvature5 <- y[7]
if(NumberOfFactors>7)Curvature6 <- y[8]
Tau1 <- 0
Tau2 <- 0
Tau3 <- 0
Tau4 <- 0
Tau5 <- 0
Tau6 <- 0
if(NumberOfFactors>1)Tau1 <- Tau[1]
if(NumberOfFactors>3)Tau2 <- Tau[2]
if(NumberOfFactors>4)Tau3 <- Tau[3]
if(NumberOfFactors>5)Tau4 <- Tau[4]
if(NumberOfFactors>6)Tau5 <- Tau[5]
if(NumberOfFactors>7)Tau6 <- Tau[6]
LSC <- list(Maturity, NumberOfFactors, Intercept, Slope,
Curvature1, Curvature2, Curvature3, Curvature4, Curvature5, Curvature6,
Tau1, Tau2, Tau3, Tau4, Tau5, Tau6)
names(LSC) <- c("Maturity", "NumberOfFactors", "Intercept", "Slope",
"Curvature1", "Curvature2", "Curvature3", "Curvature4", "Curvature5",
"Curvature6", "Tau1", "Tau2", "Tau3", "Tau4", "Tau5", "Tau6")
# Analysis of bond differential
TestBondValue = BondValue(BONDInputData)
TestBondValueDF = BondValueDF(BONDInputData, LSC)
RelativeBVError = log(TestBondValueDF/TestBondValue)*100
AbsoluteBVError = TestBondValueDF - TestBondValue
TestBondValue; TestBondValueDF; RelativeBVError; AbsoluteBVError
# Analysis of yield differential
BONDInputData$BondPrice = TestBondValueDF
TestYieldToMaturityDF = YieldToMaturitySolver(BONDInputData)
YieldDiffBPs <- (inputYieldToMaturity - TestYieldToMaturityDF)*100
inputYieldToMaturity; TestYieldToMaturityDF; YieldDiffBPs; Maturity
#
# Run on UST bond set: Align CMT w bond quotes
#
LengthUST <- length(UST$JMaturityDate)
TestBondValue <- numeric(LengthUST)
TestBondValueDF <- numeric(LengthUST)
RelativeBVError <- numeric(LengthUST)
AbsoluteBVError <- numeric(LengthUST)
TestYieldToMaturityDF <- numeric(LengthUST)
YieldDiffBPs <- numeric(LengthUST)
Maturity <- numeric(LengthUST)
MacDuration <- numeric(LengthUST)
StdConvexity <- numeric(LengthUST)
EffDuration <- numeric(LengthUST)
EffConvexity <- numeric(LengthUST)
# LSC Output Variables
VMkt0 <- numeric(LengthUST) # Market Ask Value at time 0
VMdl0 <- numeric(LengthUST) # Model Estimated Value at time 0
VMdlH <- numeric(LengthUST) # Model Estimated Value at Horizon
HPRH <- numeric(LengthUST) # Holding period return, horizon
LSCMDLevel <- numeric(LengthUST)
LSCMDSlope <- numeric(LengthUST)
LSCMDCurve1 <- numeric(LengthUST)
LSCCYLevel <- numeric(LengthUST)
LSCCYSlope <- numeric(LengthUST)
LSCCYCurve1 <- numeric(LengthUST)
LSCCCLevelSlope <- numeric(LengthUST)
LSCCCLevelCurve1 <- numeric(LengthUST)
LSCCCSlopeCurve1 <- numeric(LengthUST)
OriginalSettlementDateMonth <- BONDInputData$SettlementDateMonth
OriginalSettlementDateDay <- BONDInputData$SettlementDateDay
OriginalSettlementDateYear <- BONDInputData$SettlementDateYear
for(i in 1:LengthUST){
BONDInputData$CouponRate <- UST$COUPON[i]
BONDInputData$YieldToMaturity <- UST$ASKED.YIELD[i]
BONDInputData$BondPrice <- UST$APrice[i]
BONDInputData$MaturityDateMonth <- month(UST$JMaturityDate[i])
BONDInputData$MaturityDateDay <- day(UST$JMaturityDate[i])
BONDInputData$MaturityDateYear <- year(UST$JMaturityDate[i])
TestBondValue[i] = BondValue(BONDInputData)
Maturity[i] <- TimeToMaturity(BONDInputData)
LSC$Maturity <- Maturity[i]
TestBondValueDF[i] = BondValueDF(BONDInputData, LSC)
RelativeBVError[i] = log(TestBondValueDF[i]/TestBondValue[i])*100
AbsoluteBVError[i] = ((TestBondValueDF[i] - TestBondValue[i])/inputPar)*100
BONDInputData$BondPrice = TestBondValueDF[i] - AccruedInterest(BONDInputData)
TestYieldToMaturityDF[i] = YieldToMaturitySolver(BONDInputData)
YieldDiffBPs[i] <- (BONDInputData$YieldToMaturity - TestYieldToMaturityDF[i])*100
# Static risk management output
MacDuration[i] = Duration(BONDInputData)  # Macaulay duration
StdConvexity[i] = Convexity(BONDInputData) # Standard convexity
EffDuration[i] = EffectiveDuration(BONDInputData)
EffConvexity[i] = EffectiveConvexity(BONDInputData)
# LSC Analysis
VMkt0[i] <- UST$APrice[i]*10000 + AccruedInterest(BONDInputData)
VMdl0[i] <- BondValueDF(BONDInputData, LSC)
JTodaysDate <- as.integer(mdy.date(BONDInputData$SettlementDateMonth,
BONDInputData$SettlementDateDay, BONDInputData$SettlementDateYear))
HJDate <- as.date(JTodaysDate + inputHorizon)
BONDInputData$SettlementDateMonth <- month(HJDate)
BONDInputData$SettlementDateDay <- day(HJDate)
BONDInputData$SettlementDateYear <- year(HJDate)
VMdlH[i] <- BondValueDF(BONDInputData, LSC)
# HPR horizon is zero for single coupon as rates advanced set
HPRH[i] <- ((VMdlH[i] - VMdl0[i])/VMdl0[i])*100.0
# LSC SRMs
LSCMDLevel[i] <- BaseCurveMDLevel(BONDInputData, LSC)
LSCMDSlope[i] <- BaseCurveMDSlope(BONDInputData, LSC)
LSCMDCurve1[i] <- BaseCurveMDCurve1(BONDInputData, LSC)
LSCCYLevel[i] <- BaseCurveCYLevel(BONDInputData, LSC)
LSCCYSlope[i] <- BaseCurveCYSlope(BONDInputData, LSC)
LSCCYCurve1[i] <- BaseCurveCYCurve1(BONDInputData, LSC)
LSCCCLevelSlope[i] <- BaseCurveCCLevelSlope(BONDInputData, LSC)
LSCCCLevelCurve1[i] <- BaseCurveCCLevelCurve1(BONDInputData, LSC)
LSCCCSlopeCurve1[i] <- BaseCurveCCSlopeCurve1(BONDInputData, LSC)
BONDInputData$SettlementDateMonth <- OriginalSettlementDateMonth
BONDInputData$SettlementDateDay <- OriginalSettlementDateDay
BONDInputData$SettlementDateYear <- OriginalSettlementDateYear
}
source("SRM UST Plots.R") # UST LSC functions
beep(sound = 2)
# SRM Traditional UST Test.R
# rmarkdown::render("Valuation UST Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
Packages <- c("date", "optimx")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
#
# Test Inputs for U. S. Treasury bonds
#
MarketQuotedBondPrice = 97.531250 # Dollars: Quoted price without accrued interest
inputFrequency = 2L         # Coupon frequency per year, 1, 2, 4, or 12
inputCouponRate = 2.25      # Percent
inputPar = 100.0        # Currency
inputYieldToMaturity = 2.535235  # Percent
# Dollars: Quoted bond price without accrued interest (stubbed to -99)
inputBondPrice = -99
SettlementDateMonth = 1     # Integer: 1-12
SettlementDateDay = 17      # Integer: 1-31
SettlementDateYear = 2018   # Integer: 1-very high number
MaturityDateMonth = 11      # Integer: 1-12
MaturityDateDay = 15        # Integer: 1-31
MaturityDateYear = 2027     # Integer: 1-very high number
inputChangeInYTM = 0.001
#
# UST functions (semi-annual only)
#
source("SRM UST Functions.R")
BONDInputData <- list(inputFrequency, inputCouponRate, inputPar,
inputYieldToMaturity, inputBondPrice,
SettlementDateMonth, SettlementDateDay, SettlementDateYear,
MaturityDateMonth, MaturityDateDay, MaturityDateYear,
inputChangeInYTM)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear",
"ChangeInYTM")
#
# Calendar manipulations
#
N = CouponsRemaining(BONDInputData)
# ElapsedOutput contains fraction, JLastDate, JNextDate, and JCurrentDate
ElapsedOutput = Elapsed(BONDInputData)
# Number of Total Days
NTD <- ElapsedOutput$NextDate - ElapsedOutput$LastDate
# Number of Accrued Days since last semi-annual coupon
NAD <- ElapsedOutput$Fraction * NTD
# Fraction of coupon period that has elapsed already
f <- ElapsedOutput$Fraction
# Bond maturity, in years
Mat <- TimeToMaturity(BONDInputData)
NAD; NTD; f; N; Mat
#
# Bond value given yield to maturity
#
MarketValueOfBond = BondValue(BONDInputData)
AccruedInterestAmount = AccruedInterest(BONDInputData)
ModelQuotedBondPrice = MarketValueOfBond - AccruedInterestAmount
MarketValueOfBond; AccruedInterestAmount;
ModelQuotedBondPrice; MarketQuotedBondPrice
#
# Yield to maturity given bond value
#
inputBondPrice = MarketQuotedBondPrice #Dollars:Quoted price w/o accrued interest
BONDInputData$BondPrice <- inputBondPrice
EstYieldToMaturity = YieldToMaturitySolver(BONDInputData)
EstYieldToMaturity; inputYieldToMaturity
#
# Static risk management values
#
TestDuration = Duration(BONDInputData)  # Macaulay duration
TestConvexity = Convexity(BONDInputData) # Standard convexity
TestEffectiveDuration = EffectiveDuration(BONDInputData)
TestEffectiveConvexity = EffectiveConvexity(BONDInputData)
TestDuration; TestConvexity; TestEffectiveDuration; TestEffectiveConvexity
#
# Selected Graphs
#
CouponIncrement = inputCouponRate/2.0  # Not used in function, just graphs
NumberOfObservations = 101L
LowerBound = 0
UpperBound = 20
HCoupon = inputCouponRate + CouponIncrement
LCoupon = inputCouponRate - CouponIncrement
StepSize = (UpperBound - LowerBound)/(NumberOfObservations - 1)
# Plots
Y <- as.double(c(1:NumberOfObservations))
OBV <- as.double(c(1:NumberOfObservations))
ODuration <- as.double(c(1:NumberOfObservations))
OConvexity <- as.double(c(1:NumberOfObservations))
HBV <- as.double(c(1:NumberOfObservations))
HDuration <- as.double(c(1:NumberOfObservations))
HConvexity <- as.double(c(1:NumberOfObservations))
LBV <- as.double(c(1:NumberOfObservations))
LDuration <- as.double(c(1:NumberOfObservations))
LConvexity <- as.double(c(1:NumberOfObservations))
originalYTM = BONDInputData$YieldToMaturity
originalCR = BONDInputData$CouponRate
for(i in 1:NumberOfObservations){
Y[i] <- LowerBound + (i-1)*StepSize
BONDInputData$YieldToMaturity = Y[i]
BONDInputData$CouponRate = originalCR
OBV[i] = BondValue(BONDInputData) #- AccruedInterest(BONDInputData)
ODuration[i] = Duration(BONDInputData)
OConvexity[i] = Convexity(BONDInputData)
# High Coupon
BONDInputData$CouponRate = HCoupon
HBV[i] = BondValue(BONDInputData) #- AccruedInterest(BONDInputData)
HDuration[i] = Duration(BONDInputData)
HConvexity[i] = Convexity(BONDInputData)
# Low Coupon
BONDInputData$CouponRate = LCoupon
LBV[i] = BondValue(BONDInputData) #- AccruedInterest(BONDInputData)
LDuration[i] = Duration(BONDInputData)
LConvexity[i] = Convexity(BONDInputData)
BONDInputData$CouponRate = originalCR
}
BONDInputData$YieldToMaturity = originalYTM
BONDInputData$CouponRate = originalCR
# BV
MaxValue = max(Y); MinValue = min(Y)
xlim1 = c(1:2); xlim1[1] = MinValue; xlim1[2] = MaxValue
MaxValue = max(LBV, OBV, HBV); MinValue = min(LBV, OBV, HBV)
ylim1 = c(1:2); ylim1[1] = MinValue; ylim1[2] = MaxValue
mTitle = "Bond Values"
xTitle = "Yield To Maturity"
yTitle = "Value"
Trade = paste0('SD=', SettlementDateMonth,'/',SettlementDateDay,'/',
SettlementDateYear)
Maturity = paste0(',MD=', MaturityDateMonth,'/',MaturityDateDay,'/',
MaturityDateYear)
Par = paste0(',Par=', inputPar)
Coupon = paste0(',C =', LCoupon, ',', inputCouponRate, ',', HCoupon)
Freq = paste0(',F=',inputFrequency)
legtxt = c("Low Coupon","Coupon","High Coupon")
lTitle = "Parameter"
sTitle = paste0(Trade,Maturity,Par,Coupon,Freq)
plot(Y, LBV, type = "b", main = mTitle,
sub = sTitle, xlab = xTitle, ylab = yTitle, col = "black", xlim = xlim1,
ylim = ylim1, pch = 1, cex = 0.5)
lines(Y, OBV, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 2, cex = 0.5)
lines(Y, HBV, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 3, cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = c(1, 1, 1), lty = c(1, 1, 1),
col = c("black","black","black"), pch = c(1, 2, 3), bty = "n",
title = lTitle)
#
# Duration graph
#
MaxValue = max(LDuration, ODuration, HDuration)
MinValue = min(LDuration, ODuration, HDuration)
ylim1 = c(1:2); ylim1[1] = MinValue; ylim1[2] = MaxValue
mTitle = "Macaulay Duration"
xTitle = "Yield To Maturity"
yTitle = "Macaulay Duration"
Trade = paste0('SD=', SettlementDateMonth, '/', SettlementDateDay,'/',
SettlementDateYear)
Maturity = paste0(',MD=', MaturityDateMonth, '/', MaturityDateDay,'/',
MaturityDateYear)
Par = paste0(',Par=', inputPar)
Coupon = paste0(',C=', LCoupon, ',', inputCouponRate, ',', HCoupon)
Freq = paste0(',F=',inputFrequency)
legtxt = c("Low Coupon","Coupon","High Coupon")
lTitle = "Parameter"
sTitle = paste(Trade,Maturity,Par,Coupon,Freq)
plot(Y, LDuration, type = "b", main = mTitle,
sub = sTitle, xlab = xTitle, ylab = yTitle, col = "black", xlim = xlim1,
ylim = ylim1, pch = 1, cex = 0.5)
lines(Y, ODuration, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 2, cex = 0.5)
lines(Y, HDuration, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 3, cex = 0.5)
legend("bottomleft", legtxt, cex = 0.75, lwd = c(1, 1, 1), lty = c(1, 1, 1),
col = c("black","black","black"), pch = c(1, 2, 3), bty = "n",
title = lTitle)
#
# Convexity graph
#
MaxValue = max(LConvexity, OConvexity, HConvexity)
MinValue = min(LConvexity, OConvexity, HConvexity)
ylim1 = c(1:2)
ylim1[1] = MinValue
ylim1[2] = MaxValue
mTitle = "Standard Convexity"
xTitle = "Yield To Maturity"
yTitle = "Standard Convexity"
Trade = paste0('SD=', SettlementDateMonth, '/', SettlementDateDay, '/',
SettlementDateYear)
Maturity = paste0(',MD=', MaturityDateMonth, '/', MaturityDateDay, '/',
MaturityDateYear)
Par = paste0(',Par=', inputPar)
Coupon = paste0(',C=', LCoupon, ',', inputCouponRate, ',', HCoupon)
Freq = paste0(',F=',inputFrequency)
legtxt = c("Low Coupon","Coupon","High Coupon")
lTitle = "Parameter"
sTitle = paste(Trade,Maturity,Par,Coupon,Freq)
plot(Y, LConvexity, type = "b", main = mTitle,
sub = sTitle, xlab = xTitle, ylab = yTitle, col = "black", xlim = xlim1,
ylim = ylim1, pch = 1, cex = 0.5)
lines(Y, OConvexity, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 2, cex = 0.5)
lines(Y, HConvexity, type = "b", col ="black", xlim = xlim1, ylim = ylim1,
pch = 3, cex = 0.5)
legend("bottomleft", legtxt, cex = 0.75, lwd = c(1, 1, 1), lty = c(1, 1, 1),
col = c("black","black","black"), pch = c(1, 2, 3), bty = "n",
title = lTitle)
# SRM Traditional UST Test.R
# rmarkdown::render("Valuation UST Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
Packages <- c("date", "optimx")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
#
# Test Inputs for U. S. Treasury bonds
#
MarketQuotedBondPrice = 91 + 18/32 # Dollars: Quoted price without accrued interest
inputFrequency = 2L         # Coupon frequency per year, 1, 2, 4, or 12
inputCouponRate = 2.25      # Percent
inputPar = 100.0        # Currency
inputYieldToMaturity = 4.2558853  # Percent
# Dollars: Quoted bond price without accrued interest (stubbed to -99)
inputBondPrice = -99
SettlementDateMonth = 3     # Integer: 1-12
SettlementDateDay = 10      # Integer: 1-31
SettlementDateYear = 2023   # Integer: 1-very high number
MaturityDateMonth = 11      # Integer: 1-12
MaturityDateDay = 15        # Integer: 1-31
MaturityDateYear = 2027     # Integer: 1-very high number
inputChangeInYTM = 0.001
#
# UST functions (semi-annual only)
#
source("SRM UST Functions.R")
BONDInputData <- list(inputFrequency, inputCouponRate, inputPar,
inputYieldToMaturity, inputBondPrice,
SettlementDateMonth, SettlementDateDay, SettlementDateYear,
MaturityDateMonth, MaturityDateDay, MaturityDateYear,
inputChangeInYTM)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear",
"ChangeInYTM")
#
# Calendar manipulations
#
N = CouponsRemaining(BONDInputData)
# ElapsedOutput contains fraction, JLastDate, JNextDate, and JCurrentDate
ElapsedOutput = Elapsed(BONDInputData)
# Number of Total Days
NTD <- ElapsedOutput$NextDate - ElapsedOutput$LastDate
# Number of Accrued Days since last semi-annual coupon
NAD <- ElapsedOutput$Fraction * NTD
# Fraction of coupon period that has elapsed already
f <- ElapsedOutput$Fraction
# Bond maturity, in years
Mat <- TimeToMaturity(BONDInputData)
NAD; NTD; f; N; Mat
#
# Bond value given yield to maturity
#
MarketValueOfBond = BondValue(BONDInputData)
AccruedInterestAmount = AccruedInterest(BONDInputData)
ModelQuotedBondPrice = MarketValueOfBond - AccruedInterestAmount
MarketValueOfBond; AccruedInterestAmount;
ModelQuotedBondPrice; MarketQuotedBondPrice
#
# Yield to maturity given bond value
#
inputBondPrice = MarketQuotedBondPrice #Dollars:Quoted price w/o accrued interest
BONDInputData$BondPrice <- inputBondPrice
EstYieldToMaturity = YieldToMaturitySolver(BONDInputData)
EstYieldToMaturity; inputYieldToMaturity
#
# Static risk management values
#
TestDuration = Duration(BONDInputData)  # Macaulay duration
TestConvexity = Convexity(BONDInputData) # Standard convexity
TestEffectiveDuration = EffectiveDuration(BONDInputData)
TestEffectiveConvexity = EffectiveConvexity(BONDInputData)
TestDuration; TestConvexity; TestEffectiveDuration; TestEffectiveConvexity
# SRM Traditional UST Test.R
# rmarkdown::render("Valuation UST Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
Packages <- c("date", "optimx")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
#
# Test Inputs for U. S. Treasury bonds
#
MarketQuotedBondPrice = 91 + 18/32 # Dollars: Quoted price without accrued interest
inputFrequency = 2L         # Coupon frequency per year, 1, 2, 4, or 12
inputCouponRate = 2.25      # Percent
inputPar = 100.0        # Currency
inputYieldToMaturity = 4.2558853  # Percent
# Dollars: Quoted bond price without accrued interest (stubbed to -99)
inputBondPrice = -99
SettlementDateMonth = 3     # Integer: 1-12
SettlementDateDay = 10      # Integer: 1-31
SettlementDateYear = 2023   # Integer: 1-very high number
MaturityDateMonth = 11      # Integer: 1-12
MaturityDateDay = 15        # Integer: 1-31
MaturityDateYear = 2027     # Integer: 1-very high number
inputChangeInYTM = 0.001
#
# UST functions (semi-annual only)
#
source("SRM UST Functions.R")
BONDInputData <- list(inputFrequency, inputCouponRate, inputPar,
inputYieldToMaturity, inputBondPrice,
SettlementDateMonth, SettlementDateDay, SettlementDateYear,
MaturityDateMonth, MaturityDateDay, MaturityDateYear,
inputChangeInYTM)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear",
"ChangeInYTM")
#
# Calendar manipulations
#
N = CouponsRemaining(BONDInputData)
# ElapsedOutput contains fraction, JLastDate, JNextDate, and JCurrentDate
ElapsedOutput = Elapsed(BONDInputData)
# Number of Total Days
NTD <- ElapsedOutput$NextDate - ElapsedOutput$LastDate
# Number of Accrued Days since last semi-annual coupon
NAD <- ElapsedOutput$Fraction * NTD
# Fraction of coupon period that has elapsed already
f <- ElapsedOutput$Fraction
# Bond maturity, in years
Mat <- TimeToMaturity(BONDInputData)
NAD; NTD; f; N; Mat
#
# Bond value given yield to maturity
#
MarketValueOfBond = BondValue(BONDInputData)
AccruedInterestAmount = AccruedInterest(BONDInputData)
ModelQuotedBondPrice = MarketValueOfBond - AccruedInterestAmount
MarketValueOfBond; AccruedInterestAmount;
ModelQuotedBondPrice; MarketQuotedBondPrice
#
# Yield to maturity given bond value
#
inputBondPrice = MarketQuotedBondPrice #Dollars:Quoted price w/o accrued interest
BONDInputData$BondPrice <- inputBondPrice
EstYieldToMaturity = YieldToMaturitySolver(BONDInputData)
EstYieldToMaturity; inputYieldToMaturity
#
# Static risk management values
#
TestMacDuration = MacDuration(BONDInputData)  # Macaulay duration
TestDuration = Duration(BONDInputData)  # Modified duration
TestConvexity = Convexity(BONDInputData) # Standard convexity
TestEffectiveDuration = EffectiveDuration(BONDInputData)
TestEffectiveConvexity = EffectiveConvexity(BONDInputData)
TestMacDuration; TestDuration; TestConvexity; TestEffectiveDuration; TestEffectiveConvexity
