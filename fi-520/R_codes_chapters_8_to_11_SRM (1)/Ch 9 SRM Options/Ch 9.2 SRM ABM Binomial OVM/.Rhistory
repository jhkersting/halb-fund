ylim = ylim1, pch = 1, cex = 0.5)
lines(StockPrice, ASPVPutTV, type = "l", col ="red",
xlim = xlim1, ylim = ylim1, pch = 2, cex = 0.5)
legend("topleft", legtxt, cex = 0.75, lwd = c(1,1), lty = c(1,1),
col = c("blue", "red"), pch = c(NA,NA), bty = "n", title = lTitle)
# Calls and puts
MaxYValue = max(ESPlainVanillaCallValue, ASPlainVanillaCallValue,
ESPlainVanillaPutValue, ASPlainVanillaPutValue)
MinYValue = min(ESPlainVanillaCallValue, ASPlainVanillaCallValue,
ESPlainVanillaPutValue, ASPlainVanillaPutValue)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxXValue = max(StockPrice); MinXValue = min(StockPrice)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
legtxt = c("ES Call Value", "AS Call Value", "ES Put Value", "AS Put Value")
mTitle = "Binomial Option Value (ABM)"
xTitle = "Stock Price"
yTitle = "Option Value"
lTitle = "Parameter"
plot(StockPrice, ESPlainVanillaCallValue, type = "l", main = mTitle,
sub = sTitleBIN, xlab = xTitle, ylab = yTitle, col = "blue",
xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
lines(StockPrice, ASPlainVanillaCallValue, type = "l", col ="red",
xlim = xlim1, ylim = ylim1, pch = 2, cex = 0.5)
lines(StockPrice, ESPlainVanillaPutValue, type = "l", col ="green",
xlim = xlim1, ylim = ylim1, pch = 3, cex = 0.5)
lines(StockPrice, ASPlainVanillaPutValue, type = "l", col ="purple",
xlim = xlim1, ylim = ylim1, pch = 4, cex = 0.5)
legend("top", legtxt, cex = 0.75, lwd = c(1,1,1,1), lty = c(1,1,1,1),
col = c("blue","red","green","purple"), pch = c(NA,NA,NA,NA), bty = "n",
title = lTitle)
# Digital Options with respect to the Stock Price
MaxYValue = max(ESDigitalCallValue, ASDigitalCallValue,
ESDigitalPutValue, ASDigitalPutValue)
MinYValue = min(ESDigitalCallValue, ASDigitalCallValue,
ESDigitalPutValue, ASDigitalPutValue)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxXValue = max(StockPrice); MinXValue = min(StockPrice)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
legtxt = c("ES Call Value", "AS Call Value", "ES Put Value", "AS Put Value")
mTitle = "Binomial Digital Option Value (ABM)"
xTitle = "Stock Price"
yTitle = "Digital Option Value"
lTitle = "Parameter"
plot(StockPrice, ESDigitalCallValue, type = "l", main = mTitle,
sub = sTitleBINDP, xlab = xTitle, ylab = yTitle, col = "blue",
xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
lines(StockPrice, ASDigitalCallValue, type = "l", col ="red",
xlim = xlim1, ylim = ylim1, pch = 2, cex = 0.5)
lines(StockPrice, ESDigitalPutValue, type = "l", col ="green",
xlim = xlim1, ylim = ylim1, pch = 3, cex = 0.5)
lines(StockPrice, ASDigitalPutValue, type = "l", col ="purple",
xlim = xlim1, ylim = ylim1, pch = 4, cex = 0.5)
legend("bottom", legtxt, cex = 0.75, lwd = c(1,1,1,1), lty = c(1,1,1,1),
col = c("blue","red","green","purple"), pch = c(NA,NA,NA,NA), bty = "n",
title = lTitle)
#
# Plots with Number Of Steps
#
StepCount = as.integer((as.numeric(MaxStep)-as.numeric(MinStep)) /
as.numeric(StepSize) + 1)
NumberOfSteps = as.integer(seq(MinStep,MaxStep,StepSize))
ESPlainVanillaCallValue <- numeric(StepCount)
ESPlainVanillaPutValue <- numeric(StepCount)
ESDigitalCallValue <- numeric(StepCount)
ESDigitalPutValue <- numeric(StepCount)
ASPlainVanillaCallValue <- numeric(StepCount)
ASPlainVanillaPutValue <- numeric(StepCount)
ASDigitalCallValue <- numeric(StepCount)
ASDigitalPutValue <- numeric(StepCount)
j=0L
for(i in seq(MinStep, MaxStep, StepSize)){
j = j + 1
BINInputData$NumberOfSteps = as.integer(i)
Value <- ABMESOptionValue(BINInputData)
ESPlainVanillaCallValue[j] = Value$CallValue
ESPlainVanillaPutValue[j] = Value$PutValue
ESDigitalCallValue[j] = Value$DigitalCallValue
ESDigitalPutValue[j] = Value$DigitalPutValue
Value <- ABMASOptionValue(BINInputData)
ASPlainVanillaCallValue[j] = Value$CallValue
ASPlainVanillaPutValue[j] = Value$PutValue
ASDigitalCallValue[j] = Value$DigitalCallValue
ASDigitalPutValue[j] = Value$DigitalPutValue
}
BINInputData$NumberOfSteps = inputNumberOfSteps
# Plain vanilla option values with respect to the number of steps
xlim1 = c(1:2); xlim1[1] = MinStep; xlim1[2] = MaxStep
MaxOptionValue = max(ESPlainVanillaCallValue, ASPlainVanillaCallValue,
ESPlainVanillaPutValue, ASPlainVanillaPutValue)
MinOptionValue = min(ESPlainVanillaCallValue, ASPlainVanillaCallValue,
ESPlainVanillaPutValue, ASPlainVanillaPutValue)
ylim1 = c(1:2); ylim1[1] = MinOptionValue; ylim1[2] = MaxOptionValue
legtxt = c("ES Call Value", "AS Call Value", "ES Put Value", "AS Put Value")
mTitle = "Binomial Option Value (ABM)"
xTitle = "Number of Steps"
yTitle = "Option Value"
lTitle = "Parameter"
plot(NumberOfSteps, ESPlainVanillaCallValue, type = "l", main = mTitle,
sub = sTitleBIN, xlab = xTitle, ylab = yTitle, col = "blue",
xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
lines(NumberOfSteps, ASPlainVanillaCallValue, type = "l", col ="red",
xlim = xlim1, ylim = ylim1, pch = 2, cex = 0.5)
lines(NumberOfSteps, ESPlainVanillaPutValue, type = "l", col ="green",
xlim = xlim1, ylim = ylim1, pch = 3, cex = 0.5)
lines(NumberOfSteps, ASPlainVanillaPutValue, type = "l", col ="purple",
xlim = xlim1, ylim = ylim1, pch = 4, cex = 0.5)
legend("bottomright", legtxt, cex = 0.75, lwd = c(1,1,1,1), lty = c(1,1,1,1),
col = c("blue","red","green","purple"), pch = c(NA,NA,NA,NA), bty = "n",
title = lTitle)
# Digital Options with respect to the Stock Price
MaxYValue = max(ESDigitalCallValue, ASDigitalCallValue,
ESDigitalPutValue, ASDigitalPutValue)
MinYValue = min(ESDigitalCallValue, ASDigitalCallValue,
ESDigitalPutValue, ASDigitalPutValue)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
xlim1 = c(1:2); xlim1[1] = MinStep; xlim1[2] = MaxStep
legtxt = c("ES Call Value", "AS Call Value", "ES Put Value", "AS Put Value")
mTitle = "Binomial Digital Option Value (ABM)"
xTitle = "Number of Steps"
yTitle = "Digital Option Value"
lTitle = "Parameter"
plot(NumberOfSteps, ESDigitalCallValue, type = "l", main = mTitle,
sub = sTitleBINDP, xlab = xTitle, ylab = yTitle, col = "blue",
xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
lines(NumberOfSteps, ASDigitalCallValue, type = "l", col ="red",
xlim = xlim1, ylim = ylim1, pch = 2, cex = 0.5)
lines(NumberOfSteps, ESDigitalPutValue, type = "l", col ="green",
xlim = xlim1, ylim = ylim1, pch = 3, cex = 0.5)
lines(NumberOfSteps, ASDigitalPutValue, type = "l", col ="purple",
xlim = xlim1, ylim = ylim1, pch = 4, cex = 0.5)
legend("bottom", legtxt, cex = 0.75, lwd = c(1,1,1,1), lty = c(1,1,1,1),
col = c("blue","red","green","purple"), pch = c(NA,NA,NA,NA), bty = "n",
title = lTitle)
beep(sound = 10, print('Finished')) # Helpful when running long program
# Valuation ABM Binomial OVM European Test.R
# Arithmetic Brownian Motion
# Illustrating European-style binomial option valuation and related functions
# rmarkdown::render("3.2a European-Style Binomial ABM Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
PackagesToLibrary <- c("beepr") # Libraries
if (length(setdiff(PackagesToLibrary, rownames(installed.packages()))) > 0) {
install.packages(setdiff(PackagesToLibrary, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(PackagesToLibrary,library,character.only = TRUE) # Load and attach libraries
rm(PackagesToLibrary)
source('ESABMBINOVM Backward Recursion Function.R')
# 9.2 SRM ABM Binomial OVM American-Style Test.R
# Geometric Brownian Motion
# Illustrating American-style binomial option valuation and
#  related functions in R
# rmarkdown::render("SRM GBM Binomial OVM American-Style Test.R",
#  "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  beepr - functions for beeping to let you know when program is finished
Packages <- c("beepr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
source('ASABMBINOVM Backward Recursion With SRM Functions.R')
# Test inputs
inputStockPrice = 100.0          # Need "input" as using variable names below
inputStrikePrice = 100.0         # In currency units, numeric
inputInterestRate = 5.0          # In percent
inputDividendYield = 0.0         # In percent
inputVolatility = 29.884768295208 # In percent (Aligned to GBM case)
inputTimeToMaturity = 1.0        # In fraction of year
inputType = 1L                   # 1 for call, -1 for put
# NEW for American-style (include ES for audit)
inputStyle = 1                   # 1 for European-style, 2 for American-style
inputNumberOfSteps = as.integer(250)   # Or use L: 1000L
inputPayoutType = 1L        # 1 Plain vanilla, 2 digital (digital not built)
inputEMMProbability = 50.0       # In percent
inputGreekIncrement = 0.1        # For numerical derivatives, % of variable
inputDigitalPayout = 100.0
LowerBoundSP = 20 # Analysis wrt stock price
UpperBoundSP = 180
# LowerBound = inputStockPrice*0.05
# UpperBound = inputStockPrice*2.0
# LowerBoundV = inputVolatility*0.5
# UpperBoundV = inputVolatility*1.5
# LowerBoundT = inputTimeToMaturity*0.5
# UpperBoundT = inputTimeToMaturity*1.5
NumberOfObservations = 101
StepSize = 1L # Analysis wrt number of steps
MinStep = 5L # Must be multiple of StepSize
MaxStep = 500L # Must be multiple of StepSize
# Plot footers
TS = paste0('S=', inputStockPrice)
TX = paste0(',X=', inputStrikePrice)
TR = paste0(',r=', inputInterestRate)
Td = paste0(',d=', inputDividendYield, ',')
TV = paste0('Vol=', round(inputVolatility,4))
TT = paste0(',T=',inputTimeToMaturity)
TN = paste0(',N=',inputNumberOfSteps)
TDP = paste0(',DP=', inputDigitalPayout)
TI = paste0(',Incr.=', inputGreekIncrement)
sTitleBIN = paste0(TS,TX, TR, Td, TV, TT, TN)
sTitleBINDP = paste0(TS,TX, TR, Td, TV, TT, TN, TDP)
sTitleBINGk = paste0(TS,TX, TR, Td, TV, TT, TN, TI)
#
#  BINInputData - list of inputs with associated names
#
BINInputData <- list(inputStockPrice, inputStrikePrice, inputInterestRate,
inputDividendYield, inputVolatility, inputTimeToMaturity, inputType,
inputNumberOfSteps, inputPayoutType, inputStyle,
inputEMMProbability, inputDigitalPayout, inputGreekIncrement)
names(BINInputData) <- c("StockPrice", "StrikePrice", "InterestRate",
"DividendYield", "Volatility", "TimeToMaturity", "Type",
"NumberOfSteps", "PayoutType", "Style",
"EMMProbability", "DigitalPayout", "GreekIncrement")
# #
# # First tests of functions
# #
# # Value test
# #
# ESOV <- ABMESOptionValue(BINInputData)
# ESOV$CallValue; ESOV$PutValue; ESOV$DigitalCallValue; ESOV$DigitalPutValue
# DOV <- ESOV$DigitalCallValue + ESOV$DigitalPutValue
# PV1D <- PV1(BINInputData$TimeToMaturity, BINInputData$InterestRate) *
#   BINInputData$DigitalPayout
# DOV; PV1D
# ASOV <- ABMASOptionValue(BINInputData)
# ASOV$CallValue; ASOV$PutValue; ASOV$DigitalCallValue; ASOV$DigitalPutValue
# #
# # Delta test
# #
# ESDD <- ABMESBINOptionDeltaDirect(BINInputData)
# ESDDE <- ABMESBINOptionDeltaDirectEnh(BINInputData)
# ESND <- ABMESBINOptionNDelta(BINInputData)
# ESDD$ESCallDelta; ESDDE$ESCallDelta; ESND$ESCallDelta
# ESDD$ESPutDelta; ESDDE$ESPutDelta; ESND$ESPutDelta
# ESDD$ESDigitalCallDelta; ESDDE$ESDigitalCallDelta; ESND$ESDigitalCallDelta
# ESDD$ESDigitalPutDelta; ESDDE$ESDigitalPutDelta; ESND$ESDigitalPutDelta
# ASDD <- ABMASBINOptionDeltaDirect(BINInputData)
# ASDDE <- ABMASBINOptionDeltaDirectEnh(BINInputData)
# ASND <- ABMASBINOptionNDelta(BINInputData)
# ASDD$ASCallDelta; ASDDE$ASCallDelta; ASND$ASCallDelta
# ASDD$ASPutDelta; ASDDE$ASPutDelta; ASND$ASPutDelta
# ASDD$ASDigitalCallDelta; ASDDE$ASDigitalCallDelta; ASND$ASDigitalCallDelta
# ASDD$ASDigitalPutDelta; ASDDE$ASDigitalPutDelta; ASND$ASDigitalPutDelta
# #
# # Gamma test
# #
# ESGD <- ABMESBINOptionGammaDirect(BINInputData)
# ESGDE <- ABMESBINOptionGammaDirectEnh(BINInputData)
# ESNG <- ABMESBINOptionNGamma(BINInputData)
# ESGD$ESCallGamma; ESGDE$ESCallGamma; ESNG$ESCallGamma
# ESGD$ESPutGamma; ESGDE$ESPutGamma; ESNG$ESPutGamma
# ESGD$ESDigitalCallGamma; ESGDE$ESDigitalCallGamma; ESNG$ESDigitalCallGamma
# ESGD$ESDigitalPutGamma; ESGDE$ESDigitalPutGamma; ESNG$ESDigitalPutGamma
# ASGD <- ABMASBINOptionGammaDirect(BINInputData)
# ASGDE <- ABMASBINOptionGammaDirectEnh(BINInputData)
# ASNG <- ABMASBINOptionNGamma(BINInputData)
# ASGD$ASCallGamma; ASGDE$ASCallGamma; ASNG$ASCallGamma
# ASGD$ASPutGamma; ASGDE$ASPutGamma; ASNG$ASPutGamma
# ASGD$ASDigitalCallGamma; ASGDE$ASDigitalCallGamma; ASNG$ASDigitalCallGamma
# ASGD$ASDigitalPutGamma; ASGDE$ASDigitalPutGamma; ASNG$ASDigitalPutGamma
# #
# # Theta test
# #
# ESTD <- ABMESBINOptionThetaDirect(BINInputData)
# ESTDE <- ABMESBINOptionThetaDirectEnh(BINInputData)
# ESNT <- ABMESBINOptionNTheta(BINInputData)
# ESTD$ESCallTheta; ESTDE$ESCallTheta; ESNT$ESCallTheta
# ESTD$ESPutTheta; ESTDE$ESPutTheta; ESNT$ESPutTheta
# ESTD$ESDigitalCallTheta; ESTDE$ESDigitalCallTheta; ESNT$ESDigitalCallTheta
# ESTD$ESDigitalPutTheta; ESTDE$ESDigitalPutTheta; ESNT$ESDigitalPutTheta
# ASTD <- ABMASBINOptionThetaDirect(BINInputData)
# ASTDE <- ABMASBINOptionThetaDirectEnh(BINInputData)
# ASNT <- ABMASBINOptionNTheta(BINInputData)
# ASTD$ASCallTheta; ASTDE$ASCallTheta; ASNT$ASCallTheta
# ASTD$ASPutTheta; ASTDE$ASPutTheta; ASNT$ASPutTheta
# ASTD$ASDigitalCallTheta; ASTDE$ASDigitalCallTheta; ASNT$ASDigitalCallTheta
# ASTD$ASDigitalPutTheta; ASTDE$ASDigitalPutTheta; ASNT$ASDigitalPutTheta
# #
# # Vega test
# #
# ESNV <- ABMESBINOptionNVega(BINInputData)
# ASNV <- ABMASBINOptionNVega(BINInputData)
# ESNV$ESCallVega; ASNV$ASCallVega
# ESNV$ESPutVega; ASNV$ASPutVega
# ESNV$ESDigitalCallVega; ASNV$ASDigitalCallVega
# ESNV$ESDigitalPutVega; ASNV$ASDigitalPutVega
# #
# # Rho test
# #
# ESNV <- ABMESBINOptionNRho(BINInputData)
# ASNV <- ABMASBINOptionNRho(BINInputData)
# ESNV$ESCallRho; ASNV$ASCallRho
# ESNV$ESPutRho; ASNV$ASPutRho
# ESNV$ESDigitalCallRho; ASNV$ASDigitalCallRho
# ESNV$ESDigitalPutRho; ASNV$ASDigitalPutRho
#
# Analysis of Stock Price
#
StepSizeSP = (UpperBoundSP - LowerBoundSP)/(NumberOfObservations - 1)
TStockPrice <- c(1:NumberOfObservations)
CallIV <- c(1:NumberOfObservations)
PutIV <- c(1:NumberOfObservations)
# European-style call options
ESCallLB <- c(1:NumberOfObservations)
ESCallUB <- c(1:NumberOfObservations)
ESCallValue <- c(1:NumberOfObservations)
ESCallDeltaDirect <- c(1:NumberOfObservations)
ESCallDeltaDirectEnh <- c(1:NumberOfObservations)
ESCallDeltaNG <- c(1:NumberOfObservations)
ESCallGammaDirect <- c(1:NumberOfObservations)
ESCallGammaDirectEnh <- c(1:NumberOfObservations)
ESCallGammaNG <- c(1:NumberOfObservations)
ESCallThetaDirect <- c(1:NumberOfObservations)
ESCallThetaDirectEnh <- c(1:NumberOfObservations)
ESCallThetaNG <- c(1:NumberOfObservations)
ESCallVegaNG <- c(1:NumberOfObservations)
ESCallRhoNG <- c(1:NumberOfObservations)
# European-style put options
ESPutLB <- c(1:NumberOfObservations)
ESPutUB <- c(1:NumberOfObservations)
ESPutValue <- c(1:NumberOfObservations)
ESPutDeltaDirect <- c(1:NumberOfObservations)
ESPutDeltaDirectEnh <- c(1:NumberOfObservations)
ESPutDeltaNG <- c(1:NumberOfObservations)
ESPutGammaDirect <- c(1:NumberOfObservations)
ESPutGammaDirectEnh <- c(1:NumberOfObservations)
ESPutGammaNG <- c(1:NumberOfObservations)
ESPutThetaDirect <- c(1:NumberOfObservations)
ESPutThetaDirectEnh <- c(1:NumberOfObservations)
ESPutThetaNG <- c(1:NumberOfObservations)
ESPutVegaNG <- c(1:NumberOfObservations)
ESPutRhoNG <- c(1:NumberOfObservations)
# American-style call options
ASCallLB <- c(1:NumberOfObservations)
ASCallUB <- c(1:NumberOfObservations)
ASCallValue <- c(1:NumberOfObservations)
ASCallDeltaDirect <- c(1:NumberOfObservations)
ASCallDeltaDirectEnh <- c(1:NumberOfObservations)
ASCallDeltaNG <- c(1:NumberOfObservations)
ASCallGammaDirect <- c(1:NumberOfObservations)
ASCallGammaDirectEnh <- c(1:NumberOfObservations)
ASCallGammaNG <- c(1:NumberOfObservations)
ASCallThetaDirect <- c(1:NumberOfObservations)
ASCallThetaDirectEnh <- c(1:NumberOfObservations)
ASCallThetaNG <- c(1:NumberOfObservations)
ASCallVegaNG <- c(1:NumberOfObservations)
ASCallRhoNG <- c(1:NumberOfObservations)
# American-style put options
ASPutLB <- c(1:NumberOfObservations)
ASPutUB <- c(1:NumberOfObservations)
ASPutValue <- c(1:NumberOfObservations)
ASPutDeltaDirect <- c(1:NumberOfObservations)
ASPutDeltaDirectEnh <- c(1:NumberOfObservations)
ASPutDeltaNG <- c(1:NumberOfObservations)
ASPutGammaDirect <- c(1:NumberOfObservations)
ASPutGammaDirectEnh <- c(1:NumberOfObservations)
ASPutGammaNG <- c(1:NumberOfObservations)
ASPutThetaDirect <- c(1:NumberOfObservations)
ASPutThetaDirectEnh <- c(1:NumberOfObservations)
ASPutThetaNG <- c(1:NumberOfObservations)
ASPutVegaNG <- c(1:NumberOfObservations)
ASPutRhoNG <- c(1:NumberOfObservations)
for(i in 1:NumberOfObservations){
TStockPrice[i] <-LowerBoundSP + (i - 1)*StepSizeSP
BINInputData$Style = 1 # 1-ES, 2-AS (AS code only)
BINInputData$StockPrice = TStockPrice[i]
BINInputData$PayoutType = 1L
BINInputData$Type = 1L
CallIV[i] <- OptionIntrinsicValue(BINInputData)
ESCallLB[i] <- ESOptionLowerBound(BINInputData)
ESCallUB[i] <- ESOptionUpperBound(BINInputData)
ASCallLB[i] <- ASOptionLowerBound(BINInputData)
ASCallUB[i] <- ASOptionUpperBound(BINInputData)
BINInputData$Type = -1L
PutIV[i] <- OptionIntrinsicValue(BINInputData)
ESPutLB[i] <- ESOptionLowerBound(BINInputData)
ESPutUB[i] <- ESOptionUpperBound(BINInputData)
ASPutLB[i] <- ASOptionLowerBound(BINInputData)
ASPutUB[i] <- ASOptionUpperBound(BINInputData)
BINInputData$Type = 1L # Likely not used again
TempValue <- ABMESOptionValue(BINInputData)
ESCallValue[i] <- TempValue$CallValue
ESPutValue[i] <- TempValue$PutValue
TempValue <- ABMASOptionValue(BINInputData)
ASCallValue[i] <- TempValue$CallValue
ASPutValue[i] <- TempValue$PutValue
# Delta - European-style
TempValue <- ABMESBINOptionDeltaDirect(BINInputData)
ESCallDeltaDirect[i] <- TempValue$ESCallDelta
ESPutDeltaDirect[i] <- TempValue$ESPutDelta
TempValue <- ABMESBINOptionDeltaDirectEnh(BINInputData)
ESCallDeltaDirectEnh[i] <- TempValue$ESCallDelta
ESPutDeltaDirectEnh[i] <- TempValue$ESPutDelta
TempValue <- ABMESBINOptionNDelta(BINInputData)
ESCallDeltaNG[i] <- TempValue$ESCallDelta
ESPutDeltaNG[i] <- TempValue$ESPutDelta
# Delta - American-style
TempValue <- ABMASBINOptionDeltaDirect(BINInputData)
ASCallDeltaDirect[i] <- TempValue$ASCallDelta
ASPutDeltaDirect[i] <- TempValue$ASPutDelta
TempValue <- ABMASBINOptionDeltaDirectEnh(BINInputData)
ASCallDeltaDirectEnh[i] <- TempValue$ASCallDelta
ASPutDeltaDirectEnh[i] <- TempValue$ASPutDelta
TempValue <- ABMASBINOptionNDelta(BINInputData)
ASCallDeltaNG[i] <- TempValue$ASCallDelta
ASPutDeltaNG[i] <- TempValue$ASPutDelta
# Gamma - European-style
TempValue <- ABMESBINOptionGammaDirect(BINInputData)
ESCallGammaDirect[i] <- TempValue$ESCallGamma
ESPutGammaDirect[i] <- TempValue$ESPutGamma
TempValue <- ABMESBINOptionGammaDirectEnh(BINInputData)
ESCallGammaDirectEnh[i] <- TempValue$ESCallGamma
ESPutGammaDirectEnh[i] <- TempValue$ESPutGamma
TempValue <- ABMESBINOptionNGamma(BINInputData)
ESCallGammaNG[i] <- TempValue$ESCallGamma
ESPutGammaNG[i] <- TempValue$ESPutGamma
# Gamma - American-style
TempValue <- ABMASBINOptionGammaDirect(BINInputData)
ASCallGammaDirect[i] <- TempValue$ASCallGamma
ASPutGammaDirect[i] <- TempValue$ASPutGamma
TempValue <- ABMASBINOptionGammaDirectEnh(BINInputData)
ASCallGammaDirectEnh[i] <- TempValue$ASCallGamma
ASPutGammaDirectEnh[i] <- TempValue$ASPutGamma
TempValue <- ABMASBINOptionNGamma(BINInputData)
ASCallGammaNG[i] <- TempValue$ASCallGamma
ASPutGammaNG[i] <- TempValue$ASPutGamma
# Theta - European-style
TempValue <- ABMESBINOptionThetaDirect(BINInputData)
ESCallThetaDirect[i] <- TempValue$ESCallTheta
ESPutThetaDirect[i] <- TempValue$ESPutTheta
TempValue <- ABMESBINOptionThetaDirectEnh(BINInputData)
ESCallThetaDirectEnh[i] <- TempValue$ESCallTheta
ESPutThetaDirectEnh[i] <- TempValue$ESPutTheta
TempValue <- ABMESBINOptionNTheta(BINInputData)
ESCallThetaNG[i] <- TempValue$ESCallTheta
ESPutThetaNG[i] <- TempValue$ESPutTheta
# Theta - American-style
TempValue <- ABMASBINOptionThetaDirect(BINInputData)
ASCallThetaDirect[i] <- TempValue$ASCallTheta
ASPutThetaDirect[i] <- TempValue$ASPutTheta
TempValue <- ABMASBINOptionThetaDirectEnh(BINInputData)
ASCallThetaDirectEnh[i] <- TempValue$ASCallTheta
ASPutThetaDirectEnh[i] <- TempValue$ASPutTheta
TempValue <- ABMASBINOptionNTheta(BINInputData)
ASCallThetaNG[i] <- TempValue$ASCallTheta
ASPutThetaNG[i] <- TempValue$ASPutTheta
# Vega - European-style
TempValue <- ABMESBINOptionNVega(BINInputData)
ESCallVegaNG[i] <- TempValue$ESCallVega
ESPutVegaNG[i] <- TempValue$ESPutVega
# Vega - American-style
TempValue <- ABMASBINOptionNVega(BINInputData)
ASCallVegaNG[i] <- TempValue$ASCallVega
ASPutVegaNG[i] <- TempValue$ASPutVega
# Rho - European-style
TempValue <- ABMESBINOptionNRho(BINInputData)
ESCallRhoNG[i] <- TempValue$ESCallRho
ESPutRhoNG[i] <- TempValue$ESPutRho
# Rho - American-style
TempValue <- ABMASBINOptionNRho(BINInputData)
ASCallRhoNG[i] <- TempValue$ASCallRho
ASPutRhoNG[i] <- TempValue$ASPutRho
}
BINInputData$StockPrice = inputStockPrice # Reset from previous analysis
source('SRM ABM Binomial OVM European Style Plots.R')
source('SRM ABM Binomial OVM American Style Plots.R')
source('SRM ABM Binomial OVM Comparison Plots.R')
beep(sound = 3, print('Finished')) # fanfare
# #
# # Plots with Number Of Steps
# #
# StepCount = as.integer((as.numeric(MaxStep)-as.numeric(MinStep)) /
#   as.numeric(StepSize) + 1)
# NumberOfSteps = as.integer(seq(MinStep,MaxStep,StepSize))
# ESCallValue <- c(1:StepCount)
# ESPutValue <- c(1:StepCount)
# DigitalCallValue <- c(1:StepCount)
# DigitalPutValue <- c(1:StepCount)
# j=0L
# for(i in seq(MinStep, MaxStep, StepSize)){
#   j = j + 1
#   BINInputData$NumberOfSteps = as.integer(i)
#   BINInputData$Type = 1L
#   BINInputData$PayoutType = 1L
#   # ESCallValue[j] = i
#   ESCallValue[j] = ESBINOptionValue(BINInputData)
#   BINInputData$Type = -1L
#   ESPutValue[j] = ESBINOptionValue(BINInputData)
#   BINInputData$PayoutType = 2L
#   BINInputData$Type = 1L
#   DigitalCallValue[j] = ESBINOptionValue(BINInputData)
#   BINInputData$PayoutType = 2L
#   BINInputData$Type = -1L
#   DigitalPutValue[j] = ESBINOptionValue(BINInputData)
# }
# BINInputData$NumberOfSteps = inputNumberOfSteps
# 9.2 SRM ABM Binomial OVM American-Style Test.R
# Geometric Brownian Motion
# Illustrating American-style binomial option valuation and
#  related functions in R
# rmarkdown::render("SRM GBM Binomial OVM American-Style Test.R",
#  "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
