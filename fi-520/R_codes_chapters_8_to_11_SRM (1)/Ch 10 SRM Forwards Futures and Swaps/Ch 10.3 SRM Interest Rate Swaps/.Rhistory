maturities = maturities,
current_date = new_date)
# get current lsc coeff
sim_info$lsc_coeffs <- get_lsc_coeff(sim_info)
# create new swap data in an updated list
updated_swap <- swap_data
updated_swap$yield_curve <- sim_info$rates
updated_swap$current_date <- sim_info$current_date
updated_swap$years <-
interval(updated_swap$start_date, updated_swap$end_date) / years(1)
updated_swap$passed_years <-
interval(swap_data$start_date,updated_swap$current_date) / years(1)
# get leg info
updated_swap$fix_info <- get_leg_info(updated_swap, 'fix_info', sim_info)
updated_swap$flt_info <- get_leg_info(updated_swap, 'flt_info', sim_info)
# get_accrued_interest
updated_swap$accrued_interest <- get_accrued_interest(updated_swap,swap_data)
updated_swap_value <- get_swap_value(updated_swap)
updated_swap_value
output[i] <- updated_swap_value
print(c(i,updated_swap_value))
}
# get 90%,95%,99% VaR
VaR_90 <- quantile(output, 0.1)
VaR_95 <- quantile(output, 0.05)
VaR_99 <- quantile(output, 0.01)
print(c(VaR_90,VaR_95,VaR_99))
get_swap_value(swap_data)
# load packages
sims = 1
n_days = 30
lsc_factors = 3 #
df = 20
packages <- c("xts", "MASS", 'lubridate','mvtnorm')
pacman::p_load(packages, character.only = TRUE)
swap_data <- list(
scalar = 2,
factors = lsc_factors,
notional = 1000000,
start_date = ymd("2024-01-01"),
current_date = ymd("2024-01-01"),
end_date = ymd("2030-01-01"),
flt_calc = 'before',
fix_info = list(
day_count = '30/360',
pay_freq = 'semiannual',
reset_position = 'In Advance',
current_rate = 0.05
),
flt_info = list(
day_count = 'ACT/360',
pay_freq = 'quarterly',
reset_position = 'In Advance',
current_rate = 0
),
value = 0, # positive for fixed payer, negative for floating payer
accrued_interest = 0,
passed_years = 0
)
swap_data$years <-
interval(swap_data$start_date, swap_data$end_date) / years(1)
# read in functions-1.R
source("functions.R")
# Get Rates and Rates Data
data <- read.csv("treasury-cmt-rates.csv")
maturities <- c(1 / 12, 3 / 12, 6 / 12, 1, 2, 3, 5, 7, 10, 20, 30)
# use date column as index
rownames(data) <- data$date
# remove date column
data$date <- as.Date(data$date, format = "%m/%d/%Y")
ts_data <- xts(data[,-1], order.by = data$date)
## Clean data
# replace "" with NA
ts_data[ts_data == ""] <- "ND"
# Remove rows that have ND in every column
ts_data <- ts_data[!apply(ts_data, 1, function(x)
all(x == "ND")),]
# replace "ND" with NA
ts_data[ts_data == "ND"] <- NA
# convert to numeric
ts_data <- apply(ts_data, 2, as.numeric)
ts_data <- ts_data / 100
# create changes in rates
ts_data_diff <- diff(ts_data)
# Covariance matrix
cov_matrix <- cov(ts_data_diff, use = "pairwise.complete.obs")
current_rates <- ts_data[5000,]
## Get Interest Rate Info
rates_info <- list(rates = current_rates,
maturities = maturities,
factors = swap_data$factors)
swap_data$yield_curve <- rates_info$rates
rates_info$lsc_coeffs <- get_lsc_coeff(rates_info)
# Calcaute Swap info
swap_data$fix_info <- get_leg_info(swap_data, 'fix_info', rates_info)
swap_data$flt_info <- get_leg_info(swap_data, 'flt_info', rates_info)
# get swap fixed rate
fixed_rate <- optimize_fx_rate(swap_data)
swap_data$fixed_rate <- fixed_rate
# plot the flt_info forward rate
plot(swap_data$flt_info$pay_years,swap_data$flt_info$forward_rates, type = 'l', xlab = 'Forward Rate', ylab = 'Reset Dates')
lines(swap_data$flt_info$pay_years, swap_data$flt_info$lsc_rates, col = 'red')
# add swap rate
abline(h = swap_data$fixed_rate, col = 'blue')
## Simulate Changes
output <- numeric(sims)
for (i in 1:sims) {
#changes <- mvrnorm(n = n_days, mu = rep(0, length(current_rates)), Sigma = cov_matrix)
# use t distribution instead of normal
changes <- rmvt(n=n_days, sigma=cov_matrix, df=df, delta=rep(0, length(current_rates)))
# sum changes for each rate
new_rates <- current_rates + colSums(changes)
# get new date
new_date <- swap_data$current_date + days(n_days)
# get new rate info
sim_info <- list(rates = new_rates,
maturities = maturities,
current_date = new_date)
# get current lsc coeff
sim_info$lsc_coeffs <- get_lsc_coeff(sim_info)
# create new swap data in an updated list
updated_swap <- swap_data
updated_swap$yield_curve <- sim_info$rates
updated_swap$current_date <- sim_info$current_date
updated_swap$years <-
interval(updated_swap$start_date, updated_swap$end_date) / years(1)
updated_swap$passed_years <-
interval(swap_data$start_date,updated_swap$current_date) / years(1)
# get leg info
updated_swap$fix_info <- get_leg_info(updated_swap, 'fix_info', sim_info)
updated_swap$flt_info <- get_leg_info(updated_swap, 'flt_info', sim_info)
# get_accrued_interest
updated_swap$accrued_interest <- get_accrued_interest(updated_swap,swap_data)
updated_swap_value <- get_swap_value(updated_swap)
updated_swap_value
output[i] <- updated_swap_value
print(c(i,updated_swap_value))
}
# get 90%,95%,99% VaR
VaR_90 <- quantile(output, 0.1)
VaR_95 <- quantile(output, 0.05)
VaR_99 <- quantile(output, 0.01)
print(c(VaR_90,VaR_95,VaR_99))
get_swap_value(swap_data)
# load packages
sims = 1000
n_days = 30
lsc_factors = 3 #
df = 20
packages <- c("xts", "MASS", 'lubridate','mvtnorm')
pacman::p_load(packages, character.only = TRUE)
swap_data <- list(
scalar = 2,
factors = lsc_factors,
notional = 1000000,
start_date = ymd("2024-01-01"),
current_date = ymd("2024-01-01"),
end_date = ymd("2034-01-01"),
flt_calc = 'before',
fix_info = list(
day_count = '30/360',
pay_freq = 'semiannual',
reset_position = 'In Advance',
current_rate = 0.05
),
flt_info = list(
day_count = 'ACT/360',
pay_freq = 'quarterly',
reset_position = 'In Advance',
current_rate = 0
),
value = 0, # positive for fixed payer, negative for floating payer
accrued_interest = 0,
passed_years = 0
)
swap_data$years <-
interval(swap_data$start_date, swap_data$end_date) / years(1)
# read in functions-1.R
source("functions.R")
# Get Rates and Rates Data
data <- read.csv("treasury-cmt-rates.csv")
maturities <- c(1 / 12, 3 / 12, 6 / 12, 1, 2, 3, 5, 7, 10, 20, 30)
# use date column as index
rownames(data) <- data$date
# remove date column
data$date <- as.Date(data$date, format = "%m/%d/%Y")
ts_data <- xts(data[,-1], order.by = data$date)
## Clean data
# replace "" with NA
ts_data[ts_data == ""] <- "ND"
# Remove rows that have ND in every column
ts_data <- ts_data[!apply(ts_data, 1, function(x)
all(x == "ND")),]
# replace "ND" with NA
ts_data[ts_data == "ND"] <- NA
# convert to numeric
ts_data <- apply(ts_data, 2, as.numeric)
ts_data <- ts_data / 100
# create changes in rates
ts_data_diff <- diff(ts_data)
# Covariance matrix
cov_matrix <- cov(ts_data_diff, use = "pairwise.complete.obs")
current_rates <- ts_data[nrow(ts_data),]
## Get Interest Rate Info
rates_info <- list(rates = current_rates,
maturities = maturities,
factors = swap_data$factors)
swap_data$yield_curve <- rates_info$rates
rates_info$lsc_coeffs <- get_lsc_coeff(rates_info)
# Calcaute Swap info
swap_data$fix_info <- get_leg_info(swap_data, 'fix_info', rates_info)
swap_data$flt_info <- get_leg_info(swap_data, 'flt_info', rates_info)
# get swap fixed rate
fixed_rate <- optimize_fx_rate(swap_data)
swap_data$fixed_rate <- fixed_rate
# plot the flt_info forward rate
plot(swap_data$flt_info$pay_years,swap_data$flt_info$forward_rates, type = 'l', xlab = 'Forward Rate', ylab = 'Reset Dates')
lines(swap_data$flt_info$pay_years, swap_data$flt_info$lsc_rates, col = 'red')
# add swap rate
abline(h = swap_data$fixed_rate, col = 'blue')
## Simulate Changes
output <- numeric(sims)
for (i in 1:sims) {
#changes <- mvrnorm(n = n_days, mu = rep(0, length(current_rates)), Sigma = cov_matrix)
# use t distribution instead of normal
changes <- rmvt(n=n_days, sigma=cov_matrix, df=df, delta=rep(0, length(current_rates)))
# sum changes for each rate
new_rates <- current_rates + colSums(changes)
# get new date
new_date <- swap_data$current_date + days(n_days)
# get new rate info
sim_info <- list(rates = new_rates,
maturities = maturities,
current_date = new_date)
# get current lsc coeff
sim_info$lsc_coeffs <- get_lsc_coeff(sim_info)
# create new swap data in an updated list
updated_swap <- swap_data
updated_swap$yield_curve <- sim_info$rates
updated_swap$current_date <- sim_info$current_date
updated_swap$years <-
interval(updated_swap$start_date, updated_swap$end_date) / years(1)
updated_swap$passed_years <-
interval(swap_data$start_date,updated_swap$current_date) / years(1)
# get leg info
updated_swap$fix_info <- get_leg_info(updated_swap, 'fix_info', sim_info)
updated_swap$flt_info <- get_leg_info(updated_swap, 'flt_info', sim_info)
# get_accrued_interest
updated_swap$accrued_interest <- get_accrued_interest(updated_swap,swap_data)
updated_swap_value <- get_swap_value(updated_swap)
updated_swap_value
output[i] <- updated_swap_value
print(c(i,updated_swap_value))
}
# get 90%,95%,99% VaR
VaR_90 <- quantile(output, 0.1)
VaR_95 <- quantile(output, 0.05)
VaR_99 <- quantile(output, 0.01)
print(c(VaR_90,VaR_95,VaR_99))
get_swap_value(swap_data)
# load packages
sims = 1000
n_days = 30
lsc_factors = 3 #
df = 20
packages <- c("xts", "MASS", 'lubridate','mvtnorm')
pacman::p_load(packages, character.only = TRUE)
swap_data <- list(
scalar = 2,
factors = lsc_factors,
notional = 1000000,
start_date = ymd("2024-01-01"),
current_date = ymd("2024-01-01"),
end_date = ymd("2034-01-01"),
flt_calc = 'before',
fix_info = list(
day_count = '30/360',
pay_freq = 'semiannual',
reset_position = 'In Advance',
current_rate = 0.05
),
flt_info = list(
day_count = 'ACT/360',
pay_freq = 'quarterly',
reset_position = 'In Advance',
current_rate = 0
),
value = 0, # positive for fixed payer, negative for floating payer
accrued_interest = 0,
passed_years = 0
)
swap_data$years <-
interval(swap_data$start_date, swap_data$end_date) / years(1)
# read in functions-1.R
source("functions.R")
# Get Rates and Rates Data
data <- read.csv("treasury-cmt-rates.csv")
maturities <- c(1 / 12, 3 / 12, 6 / 12, 1, 2, 3, 5, 7, 10, 20, 30)
# use date column as index
rownames(data) <- data$date
# remove date column
data$date <- as.Date(data$date, format = "%m/%d/%Y")
ts_data <- xts(data[,-1], order.by = data$date)
## Clean data
# replace "" with NA
ts_data[ts_data == ""] <- "ND"
# Remove rows that have ND in every column
ts_data <- ts_data[!apply(ts_data, 1, function(x)
all(x == "ND")),]
# replace "ND" with NA
ts_data[ts_data == "ND"] <- NA
# convert to numeric
ts_data <- apply(ts_data, 2, as.numeric)
ts_data <- ts_data / 100
# create changes in rates
ts_data_diff <- diff(ts_data)
# Covariance matrix
cov_matrix <- cov(ts_data_diff, use = "pairwise.complete.obs")
current_rates <- ts_data[nrow(ts_data),]
## Get Interest Rate Info
rates_info <- list(rates = current_rates,
maturities = maturities,
factors = swap_data$factors)
swap_data$yield_curve <- rates_info$rates
rates_info$lsc_coeffs <- get_lsc_coeff(rates_info)
# Calcaute Swap info
swap_data$fix_info <- get_leg_info(swap_data, 'fix_info', rates_info)
swap_data$flt_info <- get_leg_info(swap_data, 'flt_info', rates_info)
# get swap fixed rate
fixed_rate <- optimize_fx_rate(swap_data)
swap_data$fixed_rate <- fixed_rate
# plot the flt_info forward rate
plot(swap_data$flt_info$pay_years,swap_data$flt_info$forward_rates, type = 'l', xlab = 'Forward Rate', ylab = 'Reset Dates')
lines(swap_data$flt_info$pay_years, swap_data$flt_info$lsc_rates, col = 'red')
# add swap rate
abline(h = swap_data$fixed_rate, col = 'blue')
## Simulate Changes
output <- numeric(sims)
for (i in 1:sims) {
#changes <- mvrnorm(n = n_days, mu = rep(0, length(current_rates)), Sigma = cov_matrix)
# use t distribution instead of normal
changes <- rmvt(n=n_days, sigma=cov_matrix, df=df, delta=rep(0, length(current_rates)))
# sum changes for each rate
new_rates <- current_rates + colSums(changes)
# get new date
new_date <- swap_data$current_date + days(n_days)
# get new rate info
sim_info <- list(rates = new_rates,
maturities = maturities,
current_date = new_date)
# get current lsc coeff
sim_info$lsc_coeffs <- get_lsc_coeff(sim_info)
# create new swap data in an updated list
updated_swap <- swap_data
updated_swap$yield_curve <- sim_info$rates
updated_swap$current_date <- sim_info$current_date
updated_swap$years <-
interval(updated_swap$start_date, updated_swap$end_date) / years(1)
updated_swap$passed_years <-
interval(swap_data$start_date,updated_swap$current_date) / years(1)
# get leg info
updated_swap$fix_info <- get_leg_info(updated_swap, 'fix_info', sim_info)
updated_swap$flt_info <- get_leg_info(updated_swap, 'flt_info', sim_info)
# get_accrued_interest
updated_swap$accrued_interest <- get_accrued_interest(updated_swap,swap_data)
updated_swap_value <- get_swap_value(updated_swap)
updated_swap_value
output[i] <- updated_swap_value
print(c(i,updated_swap_value))
}
# get 90%,95%,99% VaR
VaR_90 <- quantile(output, 0.1)
VaR_95 <- quantile(output, 0.05)
VaR_99 <- quantile(output, 0.01)
print(c(VaR_90,VaR_95,VaR_99))
get_swap_value(swap_data)
setwd("~/Desktop/fi-520/drm-ir-swaps")
# load packages
sims = 1000
n_days = 30
lsc_factors = 3 #
df = 20
day_range = 1:30
packages <- c("xts", "MASS", 'lubridate','mvtnorm','hhsmm')
pacman::p_load(packages, character.only = TRUE)
swap_data <- list(
scalar = 2,
factors = lsc_factors,
notional = 1000000,
start_date = ymd("2024-01-01"),
current_date = ymd("2024-01-01"),
end_date = ymd("2034-01-01"),
flt_calc = 'before',
fix_info = list(
day_count = '30/360',
pay_freq = 'semiannual',
reset_position = 'In Advance',
current_rate = 0.05
),
flt_info = list(
day_count = 'ACT/360',
pay_freq = 'quarterly',
reset_position = 'In Advance',
current_rate = 0
),
value = 0, # positive for fixed payer, negative for floating payer
accrued_interest = 0,
passed_years = 0
)
swap_data$years <-
interval(swap_data$start_date, swap_data$end_date) / years(1)
# read in functions-1.R
source("functions.R")
# Get Rates and Rates Data
data <- read.csv("treasury-cmt-rates.csv")
maturities <- c(1 / 12, 3 / 12, 6 / 12, 1, 2, 3, 5, 7, 10, 20, 30)
# use date column as index
rownames(data) <- data$date
# remove date column
data$date <- as.Date(data$date, format = "%m/%d/%Y")
#data <- data[data$date > as.Date("2000-01-01"),]
ts_data <- xts(data[,-1], order.by = data$date)
## Clean data
# replace "" with NA
ts_data[ts_data == ""] <- "ND"
# Remove rows that have ND in every column
ts_data <- ts_data[!apply(ts_data, 1, function(x)all(x == "ND")),]
# replace "ND" with NA
ts_data[ts_data == "ND"] <- NA
# remove rows with NA
ts_data <- ts_data[complete.cases(ts_data),]
# convert to numeric
ts_data <- apply(ts_data, 2, as.numeric)
ts_data <- ts_data / 100
# create changes in rates
ts_data_diff <- diff(ts_data)
# weights divide index by length of data
weights <- seq_along(ts_data_diff[,1]) / length(ts_data_diff[,1])
# Covariance matrix and use weight more recent data heavier
cov_matrix <- cov.wt(ts_data_diff,wt=weights,method = "ML")
cov_matrix <- cov_matrix$cov
### Get Current Rates and Changes
current_rates <- ts_data[nrow(ts_data),]
## Get Interest Rate Info
rates_info <- list(rates = current_rates,
maturities = maturities,
factors = swap_data$factors)
swap_data$yield_curve <- rates_info$rates
rates_info$lsc_coeffs <- get_lsc_coeff(rates_info)
# Calculate Swap info
swap_data$fix_info <- get_leg_info(swap_data, 'fix_info', rates_info)
swap_data$flt_info <- get_leg_info(swap_data, 'flt_info', rates_info)
# get swap fixed rate
fixed_rate <- optimize_fx_rate(swap_data)
swap_data$fixed_rate <- fixed_rate
# plot the flt_info forward rate
plot(swap_data$flt_info$pay_years,swap_data$flt_info$forward_rates, type = 'l', xlab = 'Forward Rate', ylab = 'Reset Dates')
lines(swap_data$flt_info$pay_years, swap_data$flt_info$lsc_rates, col = 'red')
# add swap rate
abline(h = swap_data$fixed_rate, col = 'blue')
sim_output <- numeric(sims)
# create a matrix of rates
rates_df <- matrix(NA, nrow = sims, ncol = length(maturities))
for (i in 1:sims) {
cov_matrix_adj <- cov_matrix #* sqrt(n_days)
changes <- mvrnorm(n = n_days, mu = rep(0, length(current_rates)), Sigma = cov_matrix_adj)
# sum changes for each rate
if(n_days >1){
changes <- apply(changes, 2, sum)
}
new_rates <- current_rates + changes
# get new date
new_date <- swap_data$current_date + days(n_days)
# get new rate info
sim_info <- list(rates = new_rates,
maturities = maturities,
current_date = new_date)
# get current lsc coeff
sim_info$lsc_coeffs <- get_lsc_coeff(sim_info)
# create new swap data in an updated list
updated_swap <- swap_data
updated_swap$yield_curve <- sim_info$rates
updated_swap$current_date <- sim_info$current_date
updated_swap$years <-
interval(updated_swap$start_date, updated_swap$end_date) / years(1)
updated_swap$passed_years <-
interval(swap_data$start_date,updated_swap$current_date) / years(1)
# get leg info
updated_swap$fix_info <- get_leg_info(updated_swap, 'fix_info', sim_info)
updated_swap$flt_info <- get_leg_info(updated_swap, 'flt_info', sim_info)
# get_accrued_interest
updated_swap$accrued_interest <- get_accrued_interest(updated_swap,swap_data)
updated_swap_value <- get_swap_value(updated_swap)
updated_swap_value
sim_output[i] <- updated_swap_value
rates_df[i,] <- new_rates
print(c(i,updated_swap_value))
}
# get 90%,95%,99% VaR
VaR_90 <- quantile(sim_output, 0.1)
VaR_95 <- quantile(sim_output, 0.05)
VaR_99 <- quantile(sim_output, 0.01)
print(c(VaR_90,VaR_95,VaR_99))
# average if below VaR
avg_90 <- mean(sim_output[sim_output < VaR_95])
avg_95 <- mean(sim_output[sim_output < VaR_95])
avg_99 <- mean(sim_output[sim_output < VaR_99])
print(c(avg_90,avg_95,avg_99))
# add sim_output to rates_df
rates_df <- cbind(rates_df,sim_output)
# send rates to csv
write.csv(rates_df, "simmed_rates.csv")
