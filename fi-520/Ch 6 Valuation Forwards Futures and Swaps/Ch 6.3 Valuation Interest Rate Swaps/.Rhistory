if(is.na(x[2]))x[2] <- 0.0
Sc[1] <- Tau[1]
}
if(i>2){
x[i] <- 0
Sc[i-2] <- Tau[i-2]
}
}
x
Sc
# x; NF; Sc; NSw; MarketSwapRates
Answer <- DiffSwRates(x, NF, Sc, NSw, MarketSwapRates)
Answer
# Answer
# OptOutput <- optimx(par=x, fn=DiffSwRates, NFac = NF, NSwaps = NSw, MSR = MarketSwapRates,
#   control=list(save.failures=TRUE, maxit=2500, all.methods=TRUE))
# OptOutput
# Method "nlminb" usually fastest: A bounds constrained quasi-Newton method (nlminb). This is a complicated code by
#   David Gay in the Bell Labs PORT library collection
OptOutput <- optimx(par=x, fn=DiffSwRates, NFac = NF, S = Sc, NSwaps = NSw,
MSR = MarketSwapRates, method=c('nlminb'), control=list(save.failures=FALSE,
maxit=2500)) #, all.methods=TRUE))
OptOutput
y <- 0
y <- numeric(NF)
y
for(i in 1:NF){
if(i==1)y[1] <- OptOutput$p1[1]
if(i==2)y[2] <- OptOutput$p2[1]
if(i==3)y[3] <- OptOutput$p3[1]
if(i==4)y[4] <- OptOutput$p4[1]
if(i==5)y[5] <- OptOutput$p5[1]
if(i==6)y[6] <- OptOutput$p6[1]
}
OptOutput
SREstimates <- SwRates(y, NF, Sc, NSw)
DREstimates <- DiscountRates(y, NF, Sc, NSw)
SREstimates
y; SREstimates; DREstimates
Maturity <- seq(1:NSw)
# Plot footers
NFs = paste0('LSC Factors = ', NF)
Scs = paste0(', Scalars = ')
if(NF==1){
Scs = paste0('')
Ts = paste0('')
}
if(NF==2)Ts = paste0(Tau[1])
if(NF==3)Ts = paste0(Tau[1])
if(NF==4)Ts = paste0(Tau[1], ', ', Tau[2])
if(NF==5)Ts = paste0(Tau[1], ', ', Tau[2], ', ', Tau[3])
if(NF==6)Ts = paste0(Tau[1], ', ', Tau[2], ', ', Tau[3], ', ', Tau[4])
sTitle = paste(NFs, Scs, Ts)
MaxValue = max(Maturity, na.rm=TRUE)
MinValue = min(0.0, Maturity, na.rm=TRUE)
xlim1 = c(1:2)
xlim1[1] = MinValue
xlim1[2] = MaxValue
if(FixRange){
MaxValue = FRMax
MinValue = FRMin
} else {
MaxValue = max(MarketSwapRates, SREstimates, DREstimates, na.rm=TRUE)
MinValue = min(MarketSwapRates, SREstimates, DREstimates, na.rm=TRUE)
}
SREstimates
ylim1 = c(1:2)
ylim1[1] = 0
ylim1[2] = 5.5
ylim1
legtxt = c("Market","LSC Fit","Discount Rates")
mTitle = "Swap Rates: January 18, 2019"
xTitle = "Maturity"
yTitle = "Rates"
lTitle = "Variable"
cols = c("black","red","blue")
plot(Maturity, MarketSwapRates, type = "p", main = mTitle,
sub = sTitle, xlab = xTitle, ylab = yTitle, col = cols[1], xlim = xlim1,
ylim = ylim1, pch = 1, cex = 0.5)
lines(Maturity, SREstimates, type = "b", col =cols[2], xlim = xlim1,
ylim = ylim1, pch = 2, cex = 0.5)
lines(Maturity, DREstimates, type = "b", col = cols[3], xlim = xlim1,
ylim = ylim1, pch = 3, cex = 0.5)
legend("bottomright", legtxt, cex = 0.75, lwd = c(1,1,1), lty = c(2,2,2),
col = cols, pch = c(1,2,3), bty = "n", title = lTitle)
source("~/Desktop/fi-520/Ch 6 Valuation Forwards Futures and Swaps/Ch 6.3 Valuation Interest Rate Swaps/6.3 Discount Curve Estimation Test.R", echo=TRUE)
OptOutput
y
SREstimates
DREstimates
setwd("~/Desktop/fi-520/R_codes_chapters_8_to_11_SRM (1)/Ch 10 SRM Forwards Futures and Swaps/Ch 10.3 SRM Interest Rate Swaps")
source("~/Desktop/fi-520/R_codes_chapters_8_to_11_SRM (1)/Ch 10 SRM Forwards Futures and Swaps/Ch 10.3 SRM Interest Rate Swaps/10.3 IR Swap Valuation Test.R", echo=TRUE)
setwd("~/Desktop/fi-520/R_codes_chapters_8_to_11_SRM (1)/Ch 10 SRM Forwards Futures and Swaps/Ch 10.3 SRM Interest Rate Swaps")
# 10.3 SRM Interest Rate Swaps Test.R
# LSC model with swap data
# rmarkdown::render("10.3 SRM Interest Rate Swaps Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
#  MASS - Multivariate normal random number generator
#  tis - isBusinessDay
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr",
"MASS", "tis")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'SRM IRS Input File.xlsx'
source('SRM IRS Input Management.R')
source('SWAP GC Functions.R')
# Swap tests
SWAP = SVInputs
MI <- read.xlsx(xlsxFile = InputFileName, sheet = "IRS Macro Inputs",
skipEmptyRows = FALSE)
IFC <- read.xlsx(xlsxFile = InputFileName, sheet = "Initial Forward Curve",
skipEmptyRows = FALSE)
IBC <- read.xlsx(xlsxFile = InputFileName, sheet = "Initial Basis Curve",
skipEmptyRows = FALSE)
IDC <- read.xlsx(xlsxFile = InputFileName, sheet = "Initial Discount Curve",
skipEmptyRows = FALSE)
#
# Work on macro inputs
#
# Evaluation date (21,916 due to MS Excel base year of 12-30-1899 cp w 1-1-1960)
date.mdy(-21916) # Off two days
jED <- as.integer(MI$Parameters[1]) - 21916
mdyED <- date.mdy(jED)
inputEM <- mdyED$month
inputED <- mdyED$day
inputEY <- mdyED$year
# Maturity date
jMD <- as.integer(MI$Parameters[3]) - 21916
mdyMD <- date.mdy(jMD)
inputMM <- mdyMD$month
inputMD <- mdyMD$day
inputMY <- mdyMD$year
inputFixedPF <- MI$PaymentFrequency[1]
inputFloatingPF <- MI$PaymentFrequency[2]
if(MI$NAD[1] == "30-Days"){
inputFixedNAD <- 1
} else {
inputFixedNAD <- 0
}
if(MI$NAD[2] == "30-Days"){
inputFloatingNAD <- 1
} else {
inputFloatingNAD <- 0
}
inputFixedNTD <- MI$NTD[1]
inputFloatingNTD <- MI$NTD[2]
inputReceivePay <- as.numeric(MI$Parameters[7])
inputCurveType <- MI$Parameters[8]
inputNotionalAmount <- as.numeric(MI$Parameters[4])
inputFixedRate <- as.numeric(MI$Parameters[5])
inputCashCollateral <- as.numeric(MI$Parameters[6])
inputFixedConvention <- MI$Convention[1]
inputFloatingConvention <- MI$Convention[2]
# Check inputting process
MI$Parameters[1]; jED; inputEM; inputED; inputEY
MI$Parameters[3]; jMD; inputMM; inputMD; inputMY
inputFixedPF; inputFloatingPF
inputFixedNAD; inputFloatingNAD
inputFixedNTD; inputFloatingNTD
inputReceivePay; inputCurveType;
inputNotionalAmount; inputFixedRate; inputCashCollateral
inputFixedConvention; inputFloatingConvention
# Evaluation date information
# Forward curve
inputNumberLSCEFR <- IFC$Parameters[1]
inputEDFCParameters <- numeric(inputNumberLSCEFR)
inputEDFCScalars <- numeric(inputNumberLSCEFR-1)
for(i in 1:inputNumberLSCEFR){
if(i < inputNumberLSCEFR)inputEDFCScalars[i] <- IFC$Scalars[i+2]
inputEDFCParameters[i] <- IFC$Parameters[i+1]
}
# Basis or discount curve
#  GR and GC denote generic rate and generic curve (basis or discount)
#
if(inputCurveType=='BC'){
inputNumberLSCEGR <- IBC$Parameters[1]
inputEDGCParameters <- numeric(inputNumberLSCEGR)
inputEDGCScalars <- numeric(inputNumberLSCEGR-1)
for(i in 1:inputNumberLSCEGR){
if(i < inputNumberLSCEGR)inputEDGCScalars[i] <- IBC$Scalars[i+2]
inputEDGCParameters[i] <- IBC$Parameters[i+1]
}
} else {
inputNumberLSCEGR <- IDC$Parameters[1]
inputEDGCParameters <- numeric(inputNumberLSCEGR)
inputEDGCScalars <- numeric(inputNumberLSCEGR-1)
for(i in 1:inputNumberLSCEGR){
if(i < inputNumberLSCEGR)inputEDGCScalars[i] <- IDC$Scalars[i+2]
inputEDGCParameters[i] <- IDC$Parameters[i+1]
}
}
#
# Migrate Excel-based inputs into swap structure
#
TradeName <- 'Trade1'
EM <- inputEM   # Evaluation month
ED <- inputED   # Evaluation day
EY <- inputEY   # Evaluation year
MM <- inputMM   # Maturity month
MD <- inputMD   # Maturity day
MY <- inputMY   # Maturity year
FixPF <- inputFixedPF  # Fixed payment frequency, times per year
FltPF <- inputFloatingPF  # Floating payment frequency, times per year
FixNAD <- inputFixedNAD  # Fixed number of accrued days: 0=30/FixNTD, 1=ACT/FixNTD
FltNAD <- inputFloatingNAD  # Floating number of accrued days: 0=30/FixNTD, 1=ACT/FixNTD
FixNTD <- inputFixedNTD  # Day count convention for fixed leg
FltNTD <- inputFloatingNTD  # Day count convention for floating leg
FixConv <- inputFixedConvention # Modified business following (MBF) or preceeding (MBP)
FltConv <- inputFloatingConvention
SwapType <- inputReceivePay # 1 - receive fixed, -1 - receive floating
DiscountType <- inputCurveType # BC - basis curve, DC - discount curve (default)
NAmt <- inputNotionalAmount # Notional Amount
FixedRate <- inputFixedRate # Fixed swap rate
CashCollateral <- inputCashCollateral # As percent of NAmt
NLSCFR <- inputNumberLSCEFR # Number LSC forward rate factors
NLSCGR <- inputNumberLSCEGR # Number LSC discount rate factors
#
FRParm1 <- 0.0 # Forward rate LSC parameters (fill w/ zeros if not inputted)
FRParm2 <- 0.0
FRParm3 <- 0.0
FRParm4 <- 0.0
FRParm5 <- 0.0
FRParm6 <- 0.0
if(NLSCFR > 0)FRParm1 <- inputEDFCParameters[1]
if(NLSCFR > 1)FRParm2 <- inputEDFCParameters[2]
if(NLSCFR > 2)FRParm3 <- inputEDFCParameters[3]
if(NLSCFR > 3)FRParm4 <- inputEDFCParameters[4]
if(NLSCFR > 4)FRParm5 <- inputEDFCParameters[5]
if(NLSCFR > 5)FRParm6 <- inputEDFCParameters[6]
FRScalar1 <- 0.0 # Forward rate LSC scalars
FRScalar2 <- 0.0
FRScalar3 <- 0.0
FRScalar4 <- 0.0
FRScalar5 <- 0.0
if(NLSCFR > 1)FRScalar1 <- inputEDFCScalars[1]
if(NLSCFR > 2)FRScalar2 <- inputEDFCScalars[2]
if(NLSCFR > 3)FRScalar3 <- inputEDFCScalars[3]
if(NLSCFR > 4)FRScalar4 <- inputEDFCScalars[4]
if(NLSCFR > 5)FRScalar5 <- inputEDFCScalars[5]
# GR -- denote generic rate (default evaluation date)
#
GRParm1 <- 0.0 # Discount rate LSC parameters
GRParm2 <- 0.0
GRParm3 <- 0.0
GRParm4 <- 0.0
GRParm5 <- 0.0
GRParm6 <- 0.0
if(NLSCGR > 0)GRParm1 <- inputEDGCParameters[1]
if(NLSCGR > 1)GRParm2 <- inputEDGCParameters[2]
if(NLSCGR > 2)GRParm3 <- inputEDGCParameters[3]
if(NLSCGR > 3)GRParm4 <- inputEDGCParameters[4]
if(NLSCGR > 4)GRParm5 <- inputEDGCParameters[5]
if(NLSCGR > 5)GRParm6 <- inputEDGCParameters[6]
GRScalar1 <- 0.0 # Generic (basis or discount) rate LSC scalars
GRScalar2 <- 0.0
GRScalar3 <- 0.0
GRScalar4 <- 0.0
GRScalar5 <- 0.0
if(NLSCGR > 1)GRScalar1 <- inputEDGCScalars[1]
if(NLSCGR > 2)GRScalar2 <- inputEDGCScalars[2]
if(NLSCGR > 3)GRScalar3 <- inputEDGCScalars[3]
if(NLSCGR > 4)GRScalar4 <- inputEDGCScalars[4]
if(NLSCGR > 5)GRScalar5 <- inputEDGCScalars[5]
# Place all data in single data frame
SVInputs <- data.frame(TradeName, EM, ED, EY, MM, MD, MY, FixPF, FltPF,
FixNAD, FltNAD, FixNTD, FltNTD, FixConv, FltConv, SwapType, NAmt,
DiscountType, FixedRate, CashCollateral,
NLSCFR, NLSCGR, FRParm1, FRParm2, FRParm3, FRParm4, FRParm5, FRParm6,
GRParm1, GRParm2, GRParm3, GRParm4, GRParm5, GRParm6,
FRScalar1, FRScalar2, FRScalar3, FRScalar4, FRScalar5,
GRScalar1, GRScalar2, GRScalar3, GRScalar4, GRScalar5)
names(SVInputs) <- c("TradeName", "EM", "ED", "EY", "MM", "MD", "MY",
"FixPF", "FltPF", "FixNAD", "FltNAD", "FixNTD", "FltNTD", "FixConv",
"FltConv", "SwapType", "NAmt", "DiscountType",
"FixedRate", "CashCollateral", "NLSCFR", "NLSCGR",
"FRParm1", "FRParm2", "FRParm3", "FRParm4", "FRParm5", "FRParm6",
"GRParm1", "GRParm2", "GRParm3", "GRParm4", "GRParm5", "GRParm6",
"FRScalar1", "FRScalar2", "FRScalar3", "FRScalar4", "FRScalar5",
"GRScalar1", "GRScalar2", "GRScalar3", "GRScalar4", "GRScalar5")
rm(TradeName, EM, ED, EY, MM, MD, MY, FixPF, FltPF,
FixNAD, FltNAD, FixNTD, FltNTD, FixConv, FltConv, SwapType, NAmt,
DiscountType, FixedRate, CashCollateral,
NLSCFR, NLSCGR, FRParm1, FRParm2, FRParm3, FRParm4, FRParm5, FRParm6,
GRParm1, GRParm2, GRParm3, GRParm4, GRParm5, GRParm6,
FRScalar1, FRScalar2, FRScalar3, FRScalar4, FRScalar5,
GRScalar1, GRScalar2, GRScalar3, GRScalar4, GRScalar5)
# 'Rate1' uses two different curves, forward curve and discount curve (2 LSCs)
SWAP$Output = 'Rate1'
SwapRateV1 <- SwapRateGC(SWAP)
SWAP$Output = 'Rate2' # Discount curve only
SwapRateV2 <- SwapRateGC(SWAP)
T1 <- TFlt1(SWAP)
T2 <- TFlt2(SWAP)
T3 <- TFix1(SWAP)
SwapRateV3 <- 100*(T1 - T2)/T3
SwapRateV1
SwapRateV2
SwapRateV3
SwapRateBC1 <- SwapRates3T(SWAP)
SwapRateBC1
# SWAP$FixedRate <- SwapRateBC1
SwapValueBC1 <- SwapValue3T(SWAP)
SwapValueBC1
SWAP$FixedRate <- SwapRateV1
SWAP$Output = 'Value1'
SwapValueV1 <- SwapRateGC(SWAP)
# SWAP$FixedRate <- SwapRateV2
SWAP$Output = 'Value2'
SwapValueV2 <- SwapRateGC(SWAP)
SwapValueV3 <- SwapValue3T(SWAP)
SwapValueV1
SwapValueV2
SwapValueV3
# Plot footer information
TN = paste0(SWAP$TradeName)
TEval = paste0(', Eval. Date: ', SWAP$EM, '/', SWAP$ED, '/', SWAP$EY)
TMat = paste0(', Mat. Date: ', SWAP$MM, '/', SWAP$MD, '/', SWAP$MY)
TNAmt = paste0(', $',formatC(as.integer(SWAP$NAmt), big.mark=',',
format = 'f', digits = 0))
TFR = paste0(', FC: L=', FRParm1, ', S=', FRParm2, ', C=', FRParm3)
# 10.3 SRM Interest Rate Swaps Test.R
# LSC model with swap data
# rmarkdown::render("10.3 SRM Interest Rate Swaps Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
#  MASS - Multivariate normal random number generator
#  tis - isBusinessDay
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr",
"MASS", "tis")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'SRM IRS Input File.xlsx'
source('SRM IRS Input Management.R')
source('SWAP GC Functions.R')
# Swap tests
SWAP = SVInputs
# 'Rate1' uses two different curves, forward curve and discount curve (2 LSCs)
SWAP$Output = 'Rate1'
SwapRateV1 <- SwapRateGC(SWAP)
SWAP$Output = 'Rate2' # Discount curve only
SwapRateV2 <- SwapRateGC(SWAP)
T1 <- TFlt1(SWAP)
T2 <- TFlt2(SWAP)
T3 <- TFix1(SWAP)
SwapRateV3 <- 100*(T1 - T2)/T3
SwapRateV1
SwapRateV2
SwapRateV3
SwapRateBC1 <- SwapRates3T(SWAP)
SwapRateBC1
# SWAP$FixedRate <- SwapRateBC1
SwapValueBC1 <- SwapValue3T(SWAP)
SwapValueBC1
SWAP$FixedRate <- SwapRateV1
SWAP$Output = 'Value1'
SwapValueV1 <- SwapRateGC(SWAP)
# SWAP$FixedRate <- SwapRateV2
SWAP$Output = 'Value2'
SwapValueV2 <- SwapRateGC(SWAP)
SwapValueV3 <- SwapValue3T(SWAP)
SwapValueV1
SwapValueV2
SwapValueV3
# Plot footer information
TN = paste0(SWAP$TradeName)
TEval = paste0(', Eval. Date: ', SWAP$EM, '/', SWAP$ED, '/', SWAP$EY)
TMat = paste0(', Mat. Date: ', SWAP$MM, '/', SWAP$MD, '/', SWAP$MY)
TNAmt = paste0(', $',formatC(as.integer(SWAP$NAmt), big.mark=',',
format = 'f', digits = 0))
TFR = paste0(', FC: L=', FRParm1, ', S=', FRParm2, ', C=', FRParm3)
TDR = paste0(', BC: L=', GRParm1, ', S=', GRParm2, ', C=', GRParm3)
sTitle = paste0(TN, TEval, TMat, TNAmt, TFR, TDR)
sTitle
source('SRM SWAP Functions.R')
SWAP$Output = 'Rate1'
SwapRate1 <- SwapRates3T(SWAP) # SwapRateGC(SWAP)
SwapRate1
VSwapt <- SwapValuett(SWAP) # Swap value at time t
VSwaptd <- SwapValuetdtd(SWAP, HDInputs) # Swap value at horizon (td)
# Swap value at horizon (td) with parameters from initial (t)
VSwapttd <- SwapValuettd(SWAP, HDInputs)
# Swap value at horizon (td) with forward curve parameters from horizon (td)
#  and basis curve parameters from initial (t)
VSwapFCtd <- SwapValueFCtdBCttd(SWAP, HDInputs)
# Swap value at horizon (td) with forward curve parameters from initial (t)
#  and basis curve parameters from horizon (td)
VSwapBCtd <- SwapValueFCtBCtdtd(SWAP, HDInputs)
VSwapt; VSwaptd; VSwapttd; VSwapFCtd; VSwapBCtd
#
# Analysis of first derivatives
#
source('SRM SWAP First Derivative Functions.R')
# Syntax:
#  FD - analytic first derivative; NFD - numerical first derivative (for audit)
#  FC - forward curve; BC - basis curve
#  L - level; S - slope; C1 - curvature 1
# First derivatives wrt forward curve (FC)
FDwrtFCL(SWAP, HDInputs)
NFDwrtFCL(SWAP, HDInputs)
FDwrtFCS(SWAP, HDInputs)
NFDwrtFCS(SWAP, HDInputs)
FDwrtFCC1(SWAP, HDInputs)
NFDwrtFCC1(SWAP, HDInputs)
# First derivatives wrt basis curve
FDwrtBCL(SWAP, HDInputs)
NFDwrtBCL(SWAP, HDInputs)
FDwrtBCS(SWAP, HDInputs)
NFDwrtBCS(SWAP, HDInputs)
FDwrtBCC1(SWAP, HDInputs)
NFDwrtBCC1(SWAP, HDInputs)
#
# Analysis of second derivatives
# Analysis of second derivatives
#
source('SRM SWAP Second Derivative Functions.R')
# Second derivatives wrt forward curve
SDwrtFCL(SWAP, HDInputs)
NSDwrtFCL(SWAP, HDInputs)
SDwrtFCS(SWAP, HDInputs)
NSDwrtFCS(SWAP, HDInputs)
SDwrtFCC1(SWAP, HDInputs)
NSDwrtFCC1(SWAP, HDInputs)
# Second derivatives wrt basis curve
SDwrtBCL(SWAP, HDInputs)
NSDwrtBCL(SWAP, HDInputs)
SDwrtBCS(SWAP, HDInputs)
NSDwrtBCS(SWAP, HDInputs)
SDwrtBCC1(SWAP, HDInputs)
NSDwrtBCC1(SWAP, HDInputs)
# Analysis of selected cross derivatives
#
source('SRM SWAP Cross Derivative Functions.R')
# Cross derivatives wrt forward curve
SDwrtFCLS(SWAP, HDInputs)
NSDwrtFCLS(SWAP, HDInputs)
SDwrtFCSC1(SWAP, HDInputs)
NSDwrtFCSC1(SWAP, HDInputs)
SDwrtFCLC1(SWAP, HDInputs)
NSDwrtFCLC1(SWAP, HDInputs)
# Cross derivatives wrt basis curve
SDwrtBCLS(SWAP, HDInputs)
NSDwrtBCLS(SWAP, HDInputs)
SDwrtBCSC1(SWAP, HDInputs)
NSDwrtBCSC1(SWAP, HDInputs)
SDwrtBCLC1(SWAP, HDInputs)
NSDwrtBCLC1(SWAP, HDInputs)
#
# Factor durations and convexities
#
source('SRM SWAP Factor Duration and Convexity Functions.R')
or durations
source('SRM SWAP Factor Duration and Convexity Functions.R')
#
# Factor durations
#
# Forward curve
FDFCL(SWAP, HDInputs)
FDFCS(SWAP, HDInputs)
FDFCC1(SWAP, HDInputs)
# Basis curve
FDBCL(SWAP, HDInputs)
FDBCS(SWAP, HDInputs)
FDBCC1(SWAP, HDInputs)
#
# Factor convexities
#
# Forward curve
FCxFCL(SWAP, HDInputs)
FCxFCS(SWAP, HDInputs)
FCxFCC1(SWAP, HDInputs)
# Basis curve
FCxBCL(SWAP, HDInputs)
FCxBCS(SWAP, HDInputs)
FCxBCC1(SWAP, HDInputs)
#
# Factor cross-convexities
#
# Forward curve
FCCFCLS(SWAP, HDInputs)
FCCFCSC1(SWAP, HDInputs)
FCCFCLC1(SWAP, HDInputs)
# Basis curve
FCCBCLS(SWAP, HDInputs)
FCCBCSC1(SWAP, HDInputs)
FCCBCLC1(SWAP, HDInputs)
