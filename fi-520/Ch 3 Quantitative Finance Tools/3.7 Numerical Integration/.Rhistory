TimeToMaturity, Volatility)
PutITMProb <- 1.0 - Nd2(StockPrice, StrikePrice, InterestRate, DividendYield,
TimeToMaturity, Volatility)
TotalProb = CallITMProb + PutITMProb
CallITMProb; PutITMProb; TotalProb
#
# Density and distribution study
#
FixXAxis <- TRUE
FixYPDFAxis <- TRUE
FixYCDFAxis <- TRUE
OriginalVolatility <- Volatility
Increment <- 50
for(i in 1:5){
Volatility <- OriginalVolatility + (i-1)*Increment
source('Density and Distribution Study.R')
}
Volatility <- OriginalVolatility
#
# Plots with volatility
#
# Lognormal PDF Illustration Data
NumberOfObservations = 41
LowerBound = 5.0
UpperBound = 200
StepSize = (UpperBound - LowerBound)/(NumberOfObservations-1)
VolatilityV = c(1:NumberOfObservations)
LognormalMeanV <- c(1:NumberOfObservations)
LognormalMedianV <- c(1:NumberOfObservations)
LognormalModeV <- c(1:NumberOfObservations)
FI = 1L # KEY: 1 = Call, 2 = Put
for(i in 1:NumberOfObservations){
VolatilityV[i] <- as.double(LowerBound + (i-1)*StepSize)
LognormalMeanV[i] = LognormalMean(StockPrice, InterestRate, DividendYield,
TimeToMaturity, VolatilityV[i])
LognormalMedianV[i] = LognormalMedian(StockPrice, InterestRate,
DividendYield, TimeToMaturity, VolatilityV[i])
LognormalModeV[i] = LognormalMode(StockPrice, InterestRate, DividendYield,
TimeToMaturity, VolatilityV[i])
}
MaxYValue = max(LognormalMeanV, LognormalMedianV, LognormalModeV)
MinYValue = min(LognormalMeanV, LognormalMedianV, LognormalModeV)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxXValue = max(VolatilityV)
MinXValue = min(VolatilityV)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
legtxt = c("Mean","Median","Mode")
mTitle = "Lognormal Mean, Median, and Mode"
xTitle = "Volatility"
yTitle = "Value"
lTitle = "Parameter"
# Plot footers
TS = paste0('S=', StockPrice)
TR = paste0(', r=', InterestRate)
TD = paste0(', d=', DividendYield)
# TSD = paste0(', Vol=', Volatility)
TTM = paste0(', Maturity=', TimeToMaturity)
sTitle = paste0(TS, TR, TD, TTM)
plot(VolatilityV, LognormalMeanV, type = "b", main = mTitle,
sub = sTitle, xlab = xTitle, ylab = yTitle, col = "black", xlim = xlim1,
ylim = ylim1, pch = 1, cex = 0.5)
lines(VolatilityV, LognormalMedianV, type = "b", col ="black", xlim = xlim1,
ylim = ylim1, pch = 2, cex = 0.5)
lines(VolatilityV, LognormalModeV, type = "b", col ="black", xlim = xlim1,
ylim = ylim1, pch = 3, cex = 0.5)
legend("bottomleft", legtxt, cex = 0.75, lwd = c(1,1,1), lty = c(2,2,2),
col = c("black","black","black"), pch = c(1,2,3), bty = "n", title = lTitle)
#
# Plots with probability of being in-the-money
#
StepSize = (UpperBound - LowerBound)/(NumberOfObservations-1)
VolatilityV = c(1:NumberOfObservations)
CallITMProb <- c(1:NumberOfObservations)
PutITMProb <- c(1:NumberOfObservations)
for(i in 1:NumberOfObservations){
VolatilityV[i] <- LowerBound + (i-1)*StepSize
CallITMProb[i] = Nd2(StockPrice, StrikePrice, InterestRate, DividendYield,
TimeToMaturity, VolatilityV[i])
PutITMProb[i] <- 1.0 - Nd2(StockPrice, StrikePrice, InterestRate,
DividendYield, TimeToMaturity, VolatilityV[i])
}
MaxYValue = max(CallITMProb, PutITMProb)
MinYValue = min(CallITMProb, PutITMProb)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxXValue = max(VolatilityV)
MinXValue = min(VolatilityV)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
legtxt = c("Call","Put")
mTitle = "Probability Option In-The-Money"
xTitle = "Volatility"
yTitle = "Probability"
TS = paste0('S=', StockPrice)
TR = paste0(', r=', InterestRate)
TD = paste0(', d=', DividendYield)
TX = paste0(', X=', StrikePrice)
TTM = paste0(', Maturity=', TimeToMaturity)
sTitle = paste0(TS, TX, TR, TD, TTM)
lTitle = "Parameter"
plot(VolatilityV, CallITMProb, type = "b", main = mTitle, sub = sTitle,
xlab = xTitle,ylab = yTitle, col = "black", xlim = xlim1, ylim = ylim1,
pch = 1, cex = 0.5)
lines(VolatilityV, PutITMProb, type = "b", col = "black", xlim = xlim1,
ylim = ylim1, pch = 2, cex = 0.5)
legend("right", legtxt, cex = 0.75, lwd = c(1, 1, 1), lty = c(2,2,2),
col = c("black","black"), pch = c(1,2), bty = "n", title = lTitle)
#
# Built in random numbers: BSMOVM parameters
#
ExpectedReturnD = (InterestRate/100.0) + 0.10  # Decimal form
VolatilityD = (Volatility/100.0) + 0.3 # Artificially increase parameters
# Sample PDF with normal or lognormal distribution random number generator
NumberOfObservations = 10001
StockPriceTN = c(1:NumberOfObservations) # Terminal distribution, normal
StockPriceTLN = c(1:NumberOfObservations) # Terminal distribution, lognormal
NMean = log(StockPrice) + (ExpectedReturnD - VolatilityD^2/2)*TimeToMaturity
NStdDev = VolatilityD*sqrt(TimeToMaturity)
NMean2 = round(NMean, digits = 2)
NStdDev2 = round(NStdDev, digits = 2)
StockPriceTN = exp(rnorm(StockPriceTN,mean=NMean,sd=NStdDev))
StockPriceTLN = rlnorm(StockPriceTLN,mean=NMean,sd=NStdDev)
#
# MinValueSP <- max(StockPriceTLN,StockPriceTN)
# MinValueSP
#
# legtxt = c("Normal","Lognormal")
xTitle = "Underlying Variable"
yTitle = "PDF"
mTitle = "Sample Lognormal PDF (Exponential of Normal Variable)"
lTitle = "Parameter"
hist(StockPriceTN, main=mTitle, breaks=50, freq=FALSE, col="black",
labels = FALSE, sub=paste("Mean = ",NMean2,", Standard Deviation = ",
NStdDev2, ", Sample Size = ", NumberOfObservations),
xlab=xTitle, ylab=yTitle, plot=TRUE, axes=TRUE, density=10)
curve(dlnorm(x, NMean, NStdDev), add=TRUE, col="black", lwd=4)
mTitle = "Sample Lognormal PDF (Lognormal Sample)"
hist(StockPriceTLN, main=mTitle, breaks=50, freq=FALSE, col="black",
labels = FALSE, sub=paste("Mean = ",NMean2,", Standard Deviation = ",
NStdDev2, ", Sample Size = ", NumberOfObservations),
xlab=xTitle, ylab=yTitle, plot=TRUE, axes=TRUE, density=10)
curve(dlnorm(x, NMean, NStdDev), add=TRUE, col="black", lwd=4)
#
# Lognormal PDFs with different volatilities
#
# Reset Number of Observations to improve figure
NumberOfObservations <- NumberOfObservations/10
LowVol <- 45.0
MediumVol <- 90.0
HighVol <- 135.0
LowerBound = 1
UpperBound = 1000.0
StepSize = (UpperBound - LowerBound)/(NumberOfObservations-1)
Vol1 = c(1:NumberOfObservations)
v = c(1:NumberOfObservations)
ExpectedReturnD = 0.1
VolatilityD = LowVol/100.0
NMean = log(StockPrice) + (ExpectedReturnD - VolatilityD^2/2)*TimeToMaturity
NStdDev = VolatilityD*sqrt(TimeToMaturity)
for(i in 1:NumberOfObservations){
v[i] <- LowerBound + (i-1)*StepSize
Vol1[i] = dlnorm(v[i], NMean, NStdDev)  # Probability density function
}
VolatilityD = MediumVol/100.0
NMean = log(StockPrice) + (ExpectedReturnD - VolatilityD^2/2)*TimeToMaturity
NStdDev = VolatilityD*sqrt(TimeToMaturity)
Vol2 = c(1:NumberOfObservations)
for(i in 1:NumberOfObservations){
Vol2[i] = dlnorm(v[i], NMean, NStdDev)
}
VolatilityD = HighVol/100.0
NMean = log(StockPrice) + (ExpectedReturnD - VolatilityD^2/2)*TimeToMaturity
NStdDev = VolatilityD*sqrt(TimeToMaturity)
Vol3 = c(1:NumberOfObservations)
for(i in 1:NumberOfObservations){
Vol3[i] = dlnorm(v[i], NMean, NStdDev)
}
MaxYValue = max(Vol1, Vol2, Vol3)
MinYValue = min(Vol1, Vol2, Vol3)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
txt1 = paste0("Volatility = ", LowVol, "%")
txt2 = paste0("Volatility = ", MediumVol, "%")
txt3 = paste0("Volatility = ", HighVol, "%")
legtxt = c(txt1,txt2, txt3)
mTitle = "Lognormal PDF"
xTitle = "Underlying Variable"
yTitle = "PDF"
sTitlePDF = expression(paste("S=100.0,", mu,"=10%,","T=1"))
lTitle = "Parameter"
plot(v, Vol1, type = "b", main = mTitle, sub = sTitlePDF, xlab = xTitle,
ylab = yTitle, col = "black", xlim = xlim1, ylim = ylim1, pch = 1, cex=0.5)
lines(v, Vol2, type = "b", col ="black", xlim = xlim1, ylim = ylim1, pch = 2,
cex = 0.5)
lines(v, Vol3, type = "b", col ="black", xlim = xlim1, ylim = ylim1, pch = 3,
cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = c(1,1,1), lty = c(1,1,1),
col = c("black","black","black"), pch = c(1,2,3), bty = "n", title = lTitle)
# 3.7 Numerical Double Integration Test.R
# function(), plot(), lines(), legend(), integrate()
# Normal and lognormal statistics
# rmarkdown::render("3.7 Numerical Integration Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  stats: integrate(), single integral
#  pbivnorm: pbivnorm(), standard bivariate normal distribution
#  mvtnorm: pmvnorm(), multivariate normal CDF for arbitrary limits and rho
#  pracma: integral2(), double integral
#  plot3D: mesh()
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
# Libraries
#  stats: integrate(), single integral
#  pbivnorm: pbivnorm(), standard bivariate normal distribution
#  mvtnorm: pmvnorm(), multivariate normal CDF for arbitrary limits and rho
#  pracma: integral2(), double integral
#  plot3D: mesh()
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
library('XQuartz')
library('X11')
install.packages('X11')
install.packages('XQuartz')
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
install.packages('plot3D')
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
library('plot3D')
install.packages('plot3D')
library(plot3D)
# Libraries
#  stats: integrate(), single integral
#  pbivnorm: pbivnorm(), standard bivariate normal distribution
#  mvtnorm: pmvnorm(), multivariate normal CDF for arbitrary limits and rho
#  pracma: integral2(), double integral
#  plot3D: mesh()
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
# 3.7 Numerical Double Integration Test.R
# function(), plot(), lines(), legend(), integrate()
# Normal and lognormal statistics
# rmarkdown::render("3.7 Numerical Integration Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  stats: integrate(), single integral
#  pbivnorm: pbivnorm(), standard bivariate normal distribution
#  mvtnorm: pmvnorm(), multivariate normal CDF for arbitrary limits and rho
#  pracma: integral2(), double integral
#  plot3D: mesh()
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma", "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
# 3.7 Numerical Double Integration Test.R
# function(), plot(), lines(), legend(), integrate()
# Normal and lognormal statistics
# rmarkdown::render("3.7 Numerical Integration Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  stats: integrate(), single integral
#  pbivnorm: pbivnorm(), standard bivariate normal distribution
#  mvtnorm: pmvnorm(), multivariate normal CDF for arbitrary limits and rho
#  pracma: integral2(), double integral
#  plot3D: mesh()
Packages <- c("stats", "pbivnorm", "mvtnorm", "pracma") #, "plot3D")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Test Data
StockPrice = 100.0
StrikePrice = 100.0
InterestRate = 12.0
DividendYield = 0.0
Volatility = 30.0
TimeToMaturity = 1.0
source('Normal Distribution Functions.R')
source('Lognormal Distribution Functions.R')
#
# Double integral tests
#
a = 0
b = 0
rho1 = 0
# Standard bivariate normal CDF, pbivnorm(), bivariate only
N2CDFTest1 <- pbivnorm(x = a, y = b, rho = rho1, recycle = TRUE)
N2CDFTest1
# Standard bivariate normal CDF, pmvnorm(), multivariate function
mean1 <- rep(0,2)
lower1 <- rep(-Inf,2)
corr1 <- diag(2)
corr1[lower.tri(corr1)] <- 0.0
corr1[upper.tri(corr1)] <- 0.0
upper1 <- c(0,0)
N2CDFTest2 <- pmvnorm(lower=lower1, upper=upper1, mean=mean1, corr=corr1)[1]
N2CDFTest2
# Single integral, univariate normal CDF
N1CDFTest1 <- integrate(NormalPDF, -Inf, 0, 0, 1)[1]
N1CDFTest1
# Double integral, two univariate normal CDF
Normal2PDF <- function(x1, x2, Mu1, Mu2, SD1, SD2, rho){
z1 <- (x1 - Mu1) / SD1
z2 <- (x2 - Mu2) / SD2
z <- z1^2 -2*rho*z1*z2 + z2^2
PDF <- ( 1.0 / (2.0*pi*SD1*SD2*sqrt(1-rho^2)) ) *
exp( -(z / (2.0*sqrt(1 - rho^2))) )
return(PDF)
}
Mu1 <- 0
Mu2 <- 0
SD1 <- 1
SD2 <- 1
rho <- 0
x1min <- Mu1 - 5*SD1
x2min <- Mu2 - 5*SD2
N2CDFTest1 <- integral2(Normal2PDF, xmin = x1min, xmax = 0, ymin = x2min,
ymax = 0, reltol = 1e-6, Mu1 = Mu1, Mu2 = Mu2, SD1 = SD1, SD2 = SD2,
rho = rho)[1]
N2CDFTest1
NX1Obs <- 51
NX2Obs <- 51
Mu1 <- 0
Mu2 <- 0
SD1 <- 1
SD2 <- 1
rho <- 0
MinX1 <- Mu1 - 5*SD1
MinX2 <- Mu2 - 5*SD2
MaxX1 <- Mu1 + 5*SD1
MaxX2 <- Mu2 + 5*SD2
X1Incr <- (MaxX1 - MinX1) / (NX1Obs - 1)
X2Incr <- (MaxX2 - MinX2) / (NX2Obs - 1)
N2CDFV1 <- array(data = -99, dim = c(NX1Obs, NX2Obs)) # integral2()
mean1 <- rep(0,2)
mean1[1] <- Mu1
mean1[2] <- Mu2
lower1 <- rep(-Inf,2)
lower1[1] <- MinX1
lower1[2] <- MinX2
corr1 <- diag(2)
corr1[lower.tri(corr1)] <- rho
corr1[upper.tri(corr1)] <- rho
upper1 <- c(0,0)
N2CDFV2 <- array(data = -99, dim = c(NX1Obs, NX2Obs)) # pmvnorm()
N2CDFV3 <- array(data = -99, dim = c(NX1Obs, NX2Obs)) # pbivnorm()
x1 <- as.numeric(array(data = NA, dim = c(NX1Obs)))
x2 <- as.numeric(array(data = NA, dim = c(NX2Obs)))
Error12 <- array(data = 0, dim = c(NX1Obs, NX2Obs)) # integral - pmvnorm
Error13 <- array(data = 0, dim = c(NX1Obs, NX2Obs)) # integral - pbivnorm
Error23 <- array(data = 0, dim = c(NX1Obs, NX2Obs)) # pmvnorm - pbivnorm
for(i in 1:NX1Obs){
for(j in 1:NX2Obs){
x1[i] <- MinX1 + X1Incr * i
x2[j] <- MinX2 + X2Incr * j
MaxX1 <- as.numeric(x1[i])
MaxX2 <- as.numeric(x2[j])
N2CDFV1[i, j] <- as.numeric(integral2(Normal2PDF, xmin = MinX1, xmax = MaxX1,
ymin=MinX2, ymax = MaxX2, reltol = 1e-6, Mu1 = Mu1, Mu2 = Mu2,
SD1 = SD1, SD2 = SD2, rho = rho)[1])
upper1[1] <- MaxX1
upper1[2] <- MaxX2
N2CDFV2[i, j] <- pmvnorm(lower=lower1, upper=upper1, mean=mean1, corr=corr1)[1]
# pbivnorm(): Only STANDARD bivariate normal CDF
N2CDFV3[i, j] <- pbivnorm(x = MaxX1, y = MaxX2, rho = rho, recycle = TRUE)
Error12[i, j] <-  N2CDFV1[i, j] - N2CDFV2[i, j]
Error13[i, j] <-  N2CDFV1[i, j] - N2CDFV3[i, j]
Error23[i, j] <-  N2CDFV2[i, j] - N2CDFV3[i, j]
}
}
M <- mesh(x1, x2)
y3 <- 0*M$x + M$y
mTitle1 <- "Bivariate CDF (integral2)"
# phi1 <- 40
# theta1 <- 40
phi1 <- 45
theta1 <- 45
MaxXValue = max(x3)
MinXValue = min(x3)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
M <- meshgrid(x1, x2)
M <- meshgrid(x1, x2)
x3 <- M$x + 0*M$y
y3 <- 0*M$x + M$y
mTitle1 <- "Bivariate CDF (integral2)"
# phi1 <- 40
# theta1 <- 40
phi1 <- 45
theta1 <- 45
MaxXValue = max(x3)
MinXValue = min(x3)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
MaxYValue = max(y3)
MinYValue = min(y3)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxZValue = max(N2CDFV1)
View(M)
x3 <- M$X + 0*M$Y
y3 <- 0*M$X + M$Y
mTitle1 <- "Bivariate CDF (integral2)"
# phi1 <- 40
# theta1 <- 40
phi1 <- 45
theta1 <- 45
MaxXValue = max(x3)
MinXValue = min(x3)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
MaxYValue = max(y3)
MinYValue = min(y3)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxZValue = max(N2CDFV1)
MinZValue = min(N2CDFV1)
zlim1 = c(1:2); zlim1[1] = MinZValue; zlim1[2] = MaxZValue
xTitle <- "X"
yTitle <- "Y"
zTitle <- "Z"
surf3D(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
main = mTitle1, phi = phi1, theta = theta1,
xlim = xlim1, ylim = ylim1, zlim = zlim1,
xlab = xTitle, ylab = yTitle, zlab = zTitle,
axes = TRUE, scale=TRUE, box=TRUE)
# surf3D(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
#        main = mTitle1, phi = phi1, theta = theta1,
#        xlim = xlim1, ylim = ylim1, zlim = zlim1,
#        xlab = xTitle, ylab = yTitle, zlab = zTitle,
#        axes = TRUE, scale=TRUE, box=TRUE)
persp(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
main = mTitle1, phi = phi1, theta = theta1,
xlim = xlim1, ylim = ylim1, zlim = zlim1,
xlab = xTitle, ylab = yTitle, zlab = zTitle,
axes = TRUE, scale=TRUE, box=TRUE)
x3 <- M$X
# x3 <- M$X + 0*M$Y
# y3 <- 0*M$X + M$Y
x3 <- x1
y3 <- x2
mTitle1 <- "Bivariate CDF (integral2)"
# phi1 <- 40
# theta1 <- 40
phi1 <- 45
theta1 <- 45
MaxXValue = max(x3)
MinXValue = min(x3)
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
MaxYValue = max(y3)
MinYValue = min(y3)
ylim1 = c(1:2); ylim1[1] = MinYValue; ylim1[2] = MaxYValue
MaxZValue = max(N2CDFV1)
MinZValue = min(N2CDFV1)
zlim1 = c(1:2); zlim1[1] = MinZValue; zlim1[2] = MaxZValue
xTitle <- "X"
yTitle <- "Y"
zTitle <- "Z"
# surf3D(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
#        main = mTitle1, phi = phi1, theta = theta1,
#        xlim = xlim1, ylim = ylim1, zlim = zlim1,
#        xlab = xTitle, ylab = yTitle, zlab = zTitle,
#        axes = TRUE, scale=TRUE, box=TRUE)
persp(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
main = mTitle1, phi = phi1, theta = theta1,
xlim = xlim1, ylim = ylim1, zlim = zlim1,
xlab = xTitle, ylab = yTitle, zlab = zTitle,
axes = TRUE, scale=TRUE, box=TRUE)
# surf3D(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, bty = "b2",
#        main = mTitle1, phi = phi1, theta = theta1,
#        xlim = xlim1, ylim = ylim1, zlim = zlim1,
#        xlab = xTitle, ylab = yTitle, zlab = zTitle,
#        axes = TRUE, scale=TRUE, box=TRUE)
persp(x = x3, y = y3, z = N2CDFV1, colkey = FALSE, #bty = "b2",
main = mTitle1, phi = phi1, theta = theta1,
xlim = xlim1, ylim = ylim1, zlim = zlim1,
xlab = xTitle, ylab = yTitle, zlab = zTitle,
axes = TRUE, scale=TRUE, box=TRUE)
persp(x = x3, y = y3, z = N2CDFV2, colkey = FALSE, bty = "b2",
main ="Bivariate CDF (pmvnorm)", col=NULL)
persp(x = x3, y = y3, z = N2CDFV2, colkey = FALSE, #bty = "b2",
main ="Bivariate CDF (pmvnorm)", col=NULL)
persp(x = x3, y = y3, z = N2CDFV3, colkey = FALSE, #bty = "b2",
main ="Standard Bivariate CDF (pbivnorm)")
persp(x = x3, y = y3, z = Error12, colkey = TRUE, #bty = "b2",
main ="Error (integral2 - pmvnorm)")
persp(x = x3, y = y3, z = Error13, colkey = TRUE, #bty = "b2",
main ="Error (integral2 - pbivnorm)")
persp(x = x3, y = y3, z = Error23, colkey = TRUE, #bty = "b2",
main ="Error (pmvnorm - pbivnorm)")
MaxError12 <- max(abs(Error12))
MaxError13 <- max(abs(Error13))
MaxError23 <- max(abs(Error23))
MaxError12; MaxError13; MaxError23
