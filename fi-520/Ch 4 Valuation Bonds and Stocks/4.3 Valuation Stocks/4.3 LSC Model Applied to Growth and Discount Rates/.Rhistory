# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
# LSC Model Calibration Plots.R
#
# Need to plot G and DR over maturities
#
Maturity <- c(1:NumberOfMaturities)
N <- LengthII
FDR <- matrix(nrow = N, ncol = NumberOfMaturities)
GrowthRates <- matrix(nrow = N, ncol = NumberOfMaturities)
for (i in 1:N) { # Fitted values for each curve
for (j in 1:NumberOfMaturities){
GrowthRates[i,j] <- II$GLevel[i] +
II$GSlope[i] * ((1.0 - exp(-Maturity[j]/II$ScalarG[i]))/(Maturity[j]/II$ScalarG[i]))
FDR[i,j] <- II$DRLevel[i] +
II$DRSlope[i] * ((1.0 - exp(-Maturity[j]/II$ScalarDR[i]))/(Maturity[j]/II$ScalarDR[i]))
}
defaultpar <- par() # plot global parameters
par(defaultpar) # Reset to default parameters
LineType <- "b" # "p" points; "l" lines; "b" both
LineSize <- 0.75
# Set x variable here:
isxDate <- FALSE
xT <- Maturity
FixAxisX <- TRUE
MinValueX <- 0
MaxValueX <- 30
if(isxDate){
xIT <- as.integer(xT) # Dates are tricky: Convert to integer only (Julian)
} else {
xIT <- xT
}
# Number of y variables and definitions
Ny <- LengthII
FixAxisY <- TRUE
MinValueY <- 0.0
MaxValueY <- 25.0
xTitle = "Maturity"
lTitle = "Sectors"
legtxt <- format(II$Ticker)
sTitle <- "Sectors:"
cpch <- seq(1,N,1)
clwd <- c(rep(1, N))
clty <- c(rep(2,N))
mTitle <- "LSC Model: Growth Rates by Sector"
yTitle = "Growth Rates (%)"
yT <- GrowthRates
source("Generic Plots.R")
mTitle <- "LSC Model: Forward Discount Rate by Sector"
yTitle = "Forward Discount Rates (%)"
yT <- FDR
source("Generic Plots.R")
# LSC Model Calibration Plots.R
#
# Need to plot G and DR over maturities
#
Maturity <- c(1:NumberOfMaturities)
N <- LengthII
FDR <- matrix(nrow = N, ncol = NumberOfMaturities)
GrowthRates <- matrix(nrow = N, ncol = NumberOfMaturities)
for (i in 1:N) { # Fitted values for each curve
for (j in 1:NumberOfMaturities){
GrowthRates[i,j] <- II$GLevel[i] +
II$GSlope[i] * ((1.0 - exp(-Maturity[j]/ScalarG[1]))/(Maturity[j]/ScalarG[1]))
FDR[i,j] <- II$DRLevel[i] +
II$DRSlope[i] * ((1.0 - exp(-Maturity[j]/ScalarG[1]))/(Maturity[j]/ScalarG[1]))
}
x <- Maturity
y <- GrowthRates
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -20.0
MaxValueY <- 50.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
mTitle = "LSC Model: Growth Rates by Sectors"
xTitle = "Maturity"
yTitle = "Growth Rates (%)"
lTitle = "Sectors"
legtxt = format(II$Ind)
cpch <- seq(1,N,1)
clwd <- c(rep(1, N))
clty <- c(rep(2,N))
# plot(x, y[1,], type="b", xlab=xTitle, ylab=yTitle, col="black",
#      xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
# for (i in 2:N) {
#   lines(Maturity, y[i,], type="b", col="black", xlim = xlim1,
#         ylim = ylim1, pch = i, cex = 0.5)
# }
# legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
#        col = c("black"), pch = cpch, bty = "n", title = lTitle)
#
# Individual industries
#
x <- Maturity
y <- GrowthRates
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -20.0
MaxValueY <- 50.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
xTitle = "Maturity"
yTitle = "Growth Rates (%)"
lTitle = "Industries"
clwd <- c(rep(1, 1))
clty <- c(rep(2,1))
for(i in 1:LengthII){
legtxt = format(II$Ind[i])
cpch <- seq(i,i,1)
mTitle = paste0("LSC Model: Growth Rates of ", II$Industry[i])
plot(x, y[i,], type="b", main = mTitle, xlab=xTitle, ylab=yTitle, col="black",
xlim = xlim1, ylim = ylim1, pch = cpch, cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
col = c("black"), pch = cpch, bty = "n", title = lTitle)
}
#
# Plot forward discount rates
#
x <- Maturity
y <- FDR
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
mTitle = "LSC Model: Forward Discount Rates by Sectors"
xTitle = "Maturity"
yTitle = "Forward Discount Rates (%)"
lTitle = "Sectors"
legtxt = format(II$Ind)
cpch <- seq(1,N,1)
clwd <- c(rep(1, N))
clty <- c(rep(2,N))
# plot(x, y[1,], type="b", xlab=xTitle, ylab=yTitle, col="black",
#      xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
# for (i in 2:N) {
#   lines(Maturity, y[i,], type="b", col="black", xlim = xlim1,
#         ylim = ylim1, pch = i, cex = 0.5)
# }
# legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
#        col = c("black"), pch = cpch, bty = "n", title = lTitle)
# Individual industries
x <- Maturity
y <- FDR
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -5.0
MaxValueY <- 20.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
xTitle = "Maturity"
yTitle = "Forward Discount Rate (%)"
lTitle = "Industries"
clwd <- c(rep(1, 1))
clty <- c(rep(2,1))
for(i in 1:LengthII){
legtxt = format(II$Ind[i])
cpch <- seq(i,i,1)
mTitle = paste0("LSC Model: Forward Discount Rate of ", II$Industry[i])
plot(x, y[i,], type="b", main = mTitle, xlab=xTitle, ylab=yTitle, col="black",
xlim = xlim1, ylim = ylim1, pch = i, cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
col = c("black"), pch = cpch, bty = "n", title = lTitle)
}
lTitle = "Sectors"
# LSC Model Calibration Plots.R
#
# Need to plot G and DR over maturities
#
Maturity <- c(1:NumberOfMaturities)
N <- LengthII
FDR <- matrix(nrow = N, ncol = NumberOfMaturities)
GrowthRates <- matrix(nrow = N, ncol = NumberOfMaturities)
for (i in 1:N) { # Fitted values for each curve
for (j in 1:NumberOfMaturities){
GrowthRates[i,j] <- II$GLevel[i] +
II$GSlope[i] * ((1.0 - exp(-Maturity[j]/ScalarG[1]))/(Maturity[j]/ScalarG[1]))
FDR[i,j] <- II$DRLevel[i] +
II$DRSlope[i] * ((1.0 - exp(-Maturity[j]/ScalarG[1]))/(Maturity[j]/ScalarG[1]))
}
x <- Maturity
y <- GrowthRates
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -20.0
MaxValueY <- 50.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
mTitle = "LSC Model: Growth Rates by Sectors"
xTitle = "Maturity"
yTitle = "Growth Rates (%)"
lTitle = "Sectors"
legtxt = format(II$Ind)
cpch <- seq(1,N,1)
clwd <- c(rep(1, N))
clty <- c(rep(2,N))
# plot(x, y[1,], type="b", xlab=xTitle, ylab=yTitle, col="black",
#      xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
# for (i in 2:N) {
#   lines(Maturity, y[i,], type="b", col="black", xlim = xlim1,
#         ylim = ylim1, pch = i, cex = 0.5)
# }
# legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
#        col = c("black"), pch = cpch, bty = "n", title = lTitle)
#
# Individual industries
#
x <- Maturity
y <- GrowthRates
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -20.0
MaxValueY <- 50.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
xTitle = "Maturity"
yTitle = "Growth Rates (%)"
lTitle = "Industries"
clwd <- c(rep(1, 1))
clty <- c(rep(2,1))
for(i in 1:LengthII){
legtxt = format(II$Ind[i])
cpch <- seq(i,i,1)
mTitle = paste0("LSC Model: Growth Rates of ", II$Industry[i])
plot(x, y[i,], type="b", main = mTitle, xlab=xTitle, ylab=yTitle, col="black",
xlim = xlim1, ylim = ylim1, pch = cpch, cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
col = c("black"), pch = cpch, bty = "n", title = lTitle)
}
#
# Plot forward discount rates
#
x <- Maturity
y <- FDR
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
mTitle = "LSC Model: Forward Discount Rates by Sectors"
xTitle = "Maturity"
yTitle = "Forward Discount Rates (%)"
lTitle = "Sectors"
legtxt = format(II$Ind)
cpch <- seq(1,N,1)
clwd <- c(rep(1, N))
clty <- c(rep(2,N))
# plot(x, y[1,], type="b", xlab=xTitle, ylab=yTitle, col="black",
#      xlim = xlim1, ylim = ylim1, pch = 1, cex = 0.5)
# for (i in 2:N) {
#   lines(Maturity, y[i,], type="b", col="black", xlim = xlim1,
#         ylim = ylim1, pch = i, cex = 0.5)
# }
# legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
#        col = c("black"), pch = cpch, bty = "n", title = lTitle)
# Individual industries
x <- Maturity
y <- FDR
MinXValue = 0; MaxXValue = 30
xlim1 = c(1:2); xlim1[1] = MinXValue; xlim1[2] = MaxXValue
# MinValueY = min(y,na.rm = TRUE); MaxValueY = max(y,na.rm = TRUE)
# MinValueY = 0; MaxValueY = 0.4
FixAxisY <- TRUE
MinValueY <- -5.0
MaxValueY <- 20.0
ylim1 = c(1:2); ylim1[1] = MinValueY; ylim1[2] = MaxValueY
xTitle = "Maturity"
yTitle = "Forward Discount Rate (%)"
lTitle = "Sectors"
clwd <- c(rep(1, 1))
clty <- c(rep(2,1))
for(i in 1:LengthII){
legtxt = format(II$Ind[i])
cpch <- seq(i,i,1)
mTitle = paste0("LSC Model: Forward Discount Rate of ", II$Industry[i])
plot(x, y[i,], type="b", main = mTitle, xlab=xTitle, ylab=yTitle, col="black",
xlim = xlim1, ylim = ylim1, pch = i, cex = 0.5)
legend("topright", legtxt, cex = 0.75, lwd = clwd, lty = clty,
col = c("black"), pch = cpch, bty = "n", title = lTitle)
}
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
# LSC Model Growth and Discount Rate Test.R
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
#  stats - general statistical functions
#  expss - vlookup (not used now)
#  dplyr - rounding in dataframes
Packages <- c("date", "optimx", "openxlsx", "stats", "expss", "dplyr")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
# Identify spreadsheet containing inputs
InputFileName <- 'LSC Input File.xlsx'
#
# Core modeling inputs
#
NumberOfMaturities <- 500
# SPY: SP 500 ETF
# XLK: SP 500 Sector ETF: Technology
# XLF: SP 500 Sector ETF: Financial
# XLI: SP 500 Sector ETF: Industrial
# XLY: SP 500 Sector ETF: Consumer Discretionary
# XLB: SP 500 Sector ETF: Materials
# XLV: SP 500 Sector ETF: Healthcare
# XLU: SP 500 Sector ETF: Utilities
# XLP: SP 500 Sector ETF: Consumer Staples
# XLE: SP 500 Sector ETF: Energy
#
# Calibrate using LSC model
#
source("LSC Model Calibration.R")
source("LSC Model Calibration Plots.R")
source("LSC Model Calibration Plots V2.R")
