C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3]
}
if(NFac==4){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3] + C[4]*x[4]
}
if(NFac==5){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3] + C[4]*x[4] + C[5]*x[5]
}
if(NFac==6){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3] + C[4]*x[4] + C[5]*x[5] +
C[6]*x[6]
}
if(NFac==7){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
C[7] <- (S[5]/tau)*(1-exp(-tau/S[5])) - exp(-tau/S[5])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3] + C[4]*x[4] + C[5]*x[5] +
C[6]*x[6] + C[7]*x[7]
}
if(NFac==8){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
C[7] <- (S[5]/tau)*(1-exp(-tau/S[5])) - exp(-tau/S[5])
C[8] <- (S[6]/tau)*(1-exp(-tau/S[6])) - exp(-tau/S[6])
r[i] <- C[1]*x[1] + C[2]*x[2] + C[3]*x[3] + C[4]*x[4] + C[5]*x[5] +
C[6]*x[6] + C[7]*x[7] + C[8]*x[8]
}
DF[i] <- exp(-(r[i]/100.0)*tau)
}
# r; DF
# (interest rate swap formula: https://www.investopedia.com/articles/active-trading/111414/how-value-interest-rate-swaps.asp
SR[j] <- ((1.0 - DF[NFix])/(0.5*sum(DF)))*100.0
}
Diff <- sum((MSR - SR)^2, na.rm = TRUE)
return(Diff)
}
# Given LSC estimates of discount rates, compute CMT curve
CMTRates <- function(y, NFac, S, NCMTs){
C <- numeric(NFac)   # Coefficients
C[1] <- 1.0
SR <- numeric(NCMTs)
for(j in 1:NCMTs){
NFix <- j*2 # Semi-annual pay (30/360 assumed)
r <- numeric(NFix) # Discount rates
DF <- numeric(NFix) # Discount factors
for(i in 1:NFix){
tau = i/2.0
if(NFac==1){
r[i] <- C[1]*y[1]
}
if(NFac==2){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
r[i] <- C[1]*y[1] + C[2]*y[2]
}
if(NFac==3){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3]
}
if(NFac==4){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3] + C[4]*y[4]
}
if(NFac==5){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3] + C[4]*y[4] + C[5]*y[5]
}
if(NFac==6){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3] + C[4]*y[4] + C[5]*y[5] +
C[6]*y[6]
}
if(NFac==7){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
C[7] <- (S[5]/tau)*(1-exp(-tau/S[5])) - exp(-tau/S[5])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3] + C[4]*y[4] + C[5]*y[5] +
C[6]*y[6] + C[7]*y[7]
}
if(NFac==8){
C[2] <- (S[1]/tau)*(1-exp(-tau/S[1]))
C[3] <- (S[1]/tau)*(1-exp(-tau/S[1])) - exp(-tau/S[1])
C[4] <- (S[2]/tau)*(1-exp(-tau/S[2])) - exp(-tau/S[2])
C[5] <- (S[3]/tau)*(1-exp(-tau/S[3])) - exp(-tau/S[3])
C[6] <- (S[4]/tau)*(1-exp(-tau/S[4])) - exp(-tau/S[4])
C[7] <- (S[5]/tau)*(1-exp(-tau/S[5])) - exp(-tau/S[5])
C[8] <- (S[6]/tau)*(1-exp(-tau/S[6])) - exp(-tau/S[6])
r[i] <- C[1]*y[1] + C[2]*y[2] + C[3]*y[3] + C[4]*y[4] + C[5]*y[5] +
C[6]*y[6] + C[7]*y[7] + C[8]*y[8]
}
DF[i] <- exp(-(r[i]/100.0)*tau)
}
# r; DF
SR[j] <- ((1.0 - DF[NFix])/(0.5*sum(DF)))*100.0
}
return(SR)
}
# UST Book Spreads Over CMT Test.R
# rmarkdown::render("UST Book Spreads Over CMT Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
Packages <- c("date", "optimx", "openxlsx", "lubridate")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
#
# Fixed Parameters
#
inputFrequency <- 2
inputPar <- 1000000.0
RoughMaturity <- 3 # Years: Used to select one bond to analyze
NFactors <- 3 # Number of factors including Level, 8 or less
NBaseCurve <- 30 # Potential observation for every year for 30 years
# Plot range information
FixRange <- FALSE # For plots
FRMax <- 3.1 # Plot bounds if fixed
FRMin <- 2.4
# Input files for U. S. Treasury bond and CMT rates
# USTFileName <- 'UST20190917.xlsx'
# CMTFileName <- 'CMT20190917.xlsx' # Should have same date as UST
# mTitle = "UST: February 17, 2019" # Date in graph title
# USTFileName <- 'UST20220127.xlsx'
# CMTFileName <- 'CMT20220127S.xlsx' # Should have same date as UST
USTFileName <- 'UST20230124.xlsx'
CMTFileName <- 'CMT20230124.xlsx' # Should have same date as UST
mTitle = "UST: January 24, 2023 (CMT)" # Date in graph title
# Downloaded UST data stored with date appended: use for settlement
SettlementDateMonth = 1 # 1     # Based on file name
SettlementDateDay = 24 + 1 # Current practice is +1 days settlement
SettlementDateYear = 2023
source("UST Book Inputs.R") # Access UST book
sapply(UST, class) # Note: JMaturityDate will not display here with just as.date
source("UST Functions.R") # UST functions (semi-annual only)
# Select one bond for analysis
LengthUST <- length(UST$JMaturityDate) # Number of observations
# UST Book Inputs.R
#  Contains both individual UST and CMT curve information
# Read UST bonds from spreadsheet
UST <- read.xlsx(xlsxFile = USTFileName, sheet = 1, skipEmptyRows = FALSE)
View(UST)
View(UST)
# is.data.frame(UST)
UST$BID <- NULL # Remove bid price
UST$CHG <- NULL # Remove price change from previous day
# Create Julian date and then convert to integer so it displays correctly
# in the Files window
UST$JMaturityDate = as.integer(as.date(UST$MATURITY - 21916))
UST$MATURITY <- NULL # Remove spreadsheet maturity
UST$MaturityDate <- date.mmddyyyy(UST$JMaturityDate) # Create R date
View(UST)
# Work on creating quoted bond price in decimal form
APrice0 <- UST$ASKED
APrice <- trunc(UST$ASKED) # Truncate price
AFrac1 <- round((APrice0 - APrice)*100) # Number of 32nds
AFrac2 <- APrice0*1000 - APrice*1000 - AFrac1*10 # Number of 8ths
UST$APrice <- APrice + (AFrac1 + AFrac2/8)/32 # Price in decimal form, % of par
# Select one bond for analysis
LengthUST <- length(UST$JMaturityDate) # Number of observations
z <- FALSE # Indicator switch, set to TRUE once bond is selected
JTodaysDate <- as.integer(mdy.date(SettlementDateMonth, SettlementDateDay,
SettlementDateYear))
for(i in 1:LengthUST){ # Find first bond in excess of RoughMaturity
TDate <- as.integer(UST$JMaturityDate[i])
TYears <- (as.numeric(TDate - JTodaysDate))/365.25
if(z == FALSE && TYears > RoughMaturity){
SelectedBond <- i
z <- TRUE
}
}
UST[SelectedBond,] # Console: Selected bond parameters
inputCouponRate <- UST$COUPON[SelectedBond]
inputYieldToMaturity <- UST$ASKED.YIELD[SelectedBond]
inputBondPrice <- (UST$APrice[SelectedBond]/100.0)*inputPar
MaturityDateMonth <- month(as.date(UST$JMaturityDate[SelectedBond]))
MaturityDateDay <- day(as.date(UST$JMaturityDate[SelectedBond]))
MaturityDateYear <- year(as.date(UST$JMaturityDate[SelectedBond]))
BONDInputData <- list(inputFrequency, inputCouponRate, inputPar,
inputYieldToMaturity, inputBondPrice,
SettlementDateMonth, SettlementDateDay, SettlementDateYear,
MaturityDateMonth, MaturityDateDay, MaturityDateYear)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear")
# Calendar manipulations
N = CouponsRemaining(BONDInputData)
# ElapsedOutput contains fraction, JLastDate, JNextDate, and JCurrentDate
ElapsedOutput = Elapsed(BONDInputData)
# Number of Total Days
NTD <- ElapsedOutput$NextDate - ElapsedOutput$LastDate
# Number of Accrued Days since last semi-annual coupon
NAD <- ElapsedOutput$Fraction * NTD
# Fraction of coupon period that has elapsed already
f <- ElapsedOutput$Fraction
# Bond maturity, in years
Mat <- TimeToMaturity(BONDInputData)
NAD; NTD; f; N; Mat
# Bond value given yield to maturity
MarketQuotedBondPrice <- inputBondPrice
MarketValueOfBond <- BondValue(BONDInputData)
AccruedInterestAmount <- AccruedInterest(BONDInputData)
ModelQuotedBondPrice <- MarketValueOfBond - AccruedInterestAmount
MarketValueOfBond; AccruedInterestAmount;
ModelQuotedBondPrice; MarketQuotedBondPrice
# Yield to maturity given bond value
# Dollars:Quoted price w/o accrued interest
inputBondPrice = MarketQuotedBondPrice
BONDInputData$BondPrice <- inputBondPrice
EstYieldToMaturity = YieldToMaturitySolver(BONDInputData)
EstYieldToMaturity; inputYieldToMaturity
#
# Build zero coupon, annualized, cont. compounded, discount rate curve
#  Inputs: NFactors - Number of factors
#  NBaseCurve - Number of CMTs. MarketCMTRates=int. vector 1 to NBaseCurve
# CMT curve information
#
# Access UST book
source("CMT Inputs.R")
View(CMT)
# UST functions (semi-annual only)
source("CMT Functions.R")
# CMT Inputs.R
# Read CMT Yields from spreadsheet
CMT <- read.xlsx(xlsxFile = CMTFileName, sheet = 1, skipEmptyRows = FALSE)
CMT
#
# Input current CMT yields
#
MarketCMTRates <- numeric(NBaseCurve) # num vector size NBaseCurve, zeros
MarketCMTRates[MarketCMTRates == 0] <- NA # Replace with NAs
# Read in from spreadsheet
LengthCMT <- length(CMT$CMTYield)
for(j in 1:LengthCMT){
for(i in 1:NBaseCurve){
if(CMT$Maturity[j] == i){
CMTMaturity <- CMT$Maturity[j]
MarketCMTRates[CMTMaturity] <- CMT$CMTYield[j]
}
}
}
# Input Scalars: Taus
NTau <- NFactors - 2   # Must be between 0 and 7 (not inclusive, integer)
Tau <- numeric(NTau)   # b (Level, slope, and curvatures)
Tau[1] <- 2.0 # Overwritten with bond maturity in test program
if(NTau>1)Tau[2] <- 3.0
if(NTau>2)Tau[3] <- 6.0
if(NTau>3)Tau[4] <- 15.0
if(NTau>4)Tau[5] <- 0.5
if(NTau>5)Tau[6] <- 4.0
# CMT test inputs
isCMTInputDifferent = FALSE
if(isCMTInputDifferent){ # Opportunity to provide other inputs
inputCMTFrequency = 2L         # Coupon frequency per year, 1, 2, 4, or 12
inputCMTCouponRate = 2.25      # Percent
inputCMTPar = 1000000.0        # Currency
inputCMTYieldToMaturity = 2.637802  # Percent
# Dollars: Quoted bond price without accrued interest
inputCMTBondPrice = 10000*(97 + 31.5/32)
CMTSettlementDateMonth = 2     # Integer: 1-12
CMTSettlementDateDay = 12      # Integer: 1-31
CMTSettlementDateYear = 2019   # Integer: 1-very high number
CMTMaturityDateMonth = 11      # Integer: 1-12
CMTMaturityDateDay = 15        # Integer: 1-31
CMTMaturityDateYear = 2027     # Integer: 1-very high number
} else {
inputCMTFrequency = inputFrequency
inputCMTCouponRate = inputCouponRate
inputCMTPar = inputPar
inputCMTYieldToMaturity = inputYieldToMaturity
inputCMTBondPrice = inputBondPrice
CMTSettlementDateMonth = SettlementDateMonth
CMTSettlementDateDay = SettlementDateDay
CMTSettlementDateYear = SettlementDateYear
CMTMaturityDateMonth = MaturityDateMonth
CMTMaturityDateDay = MaturityDateDay
CMTMaturityDateYear = MaturityDateYear
}
츠ㅆ
CMT
View(UST)
# UST Book Spreads Over CMT Test.R
# rmarkdown::render("UST Book Spreads Over CMT Test.R", "word_document")
rm(list = ls())  # Take out the Environment "trash"
cat("\014") # Clear Console, making error checking easier.
while (!is.null(dev.list()))  dev.off() # Clear old plots
par(family = 'Times New Roman') # Globally set fonts for graphs
# Libraries
#  date - functions for handling dates
#  optimx - general purpose optimization
#  openxlsx - manipulate spreadsheet files
Packages <- c("date", "optimx", "openxlsx", "lubridate")
if(length(setdiff(Packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(Packages, rownames(installed.packages())))
} # Make sure libraries are installed on this computer
lapply(Packages, library, character.only=TRUE) # Load and attach libraries
rm(Packages)
#
# Fixed Parameters
#
inputFrequency <- 2
inputPar <- 1000000.0
RoughMaturity <- 3 # Years: Used to select one bond to analyze
NFactors <- 3 # Number of factors including Level, 8 or less
NBaseCurve <- 30 # Potential observation for every year for 30 years
# Plot range information
FixRange <- FALSE # For plots
FRMax <- 3.1 # Plot bounds if fixed
FRMin <- 2.4
source("UST Book Inputs.R") # Access UST book
# Input files for U. S. Treasury bond and CMT rates
# USTFileName <- 'UST20190917.xlsx'
# CMTFileName <- 'CMT20190917.xlsx' # Should have same date as UST
# mTitle = "UST: February 17, 2019" # Date in graph title
# USTFileName <- 'UST20220127.xlsx'
# CMTFileName <- 'CMT20220127S.xlsx' # Should have same date as UST
USTFileName <- 'UST20230124.xlsx'
CMTFileName <- 'CMT20230124.xlsx' # Should have same date as UST
mTitle = "UST: January 24, 2023 (CMT)" # Date in graph title
# Downloaded UST data stored with date appended: use for settlement
SettlementDateMonth = 1 # 1     # Based on file name
SettlementDateDay = 24 + 1 # Current practice is +1 days settlement
SettlementDateYear = 2023
source("UST Book Inputs.R") # Access UST book
sapply(UST, class) # Note: JMaturityDate will not display here with just as.date
# Input files for U. S. Treasury bond and CMT rates
# USTFileName <- 'UST20190917.xlsx'
# CMTFileName <- 'CMT20190917.xlsx' # Should have same date as UST
# mTitle = "UST: February 17, 2019" # Date in graph title
# USTFileName <- 'UST20220127.xlsx'
# CMTFileName <- 'CMT20220127S.xlsx' # Should have same date as UST
USTFileName <- 'UST20230124.xlsx'
CMTFileName <- 'CMT20230124.xlsx' # Should have same date as UST
mTitle = "UST: January 24, 2023 (CMT)" # Date in graph title
# Downloaded UST data stored with date appended: use for settlement
SettlementDateMonth = 1 # 1     # Based on file name
SettlementDateDay = 24 + 1 # Current practice is +1 days settlement
SettlementDateYear = 2023
source("UST Book Inputs.R") # Access UST book
UST
sapply(UST, class) # Note: JMaturityDate will not display here with just as.date
UST
source("UST Functions.R") # UST functions (semi-annual only)
# Select one bond for analysis
LengthUST <- length(UST$JMaturityDate) # Number of observations
z <- FALSE # Indicator switch, set to TRUE once bond is selected
JTodaysDate <- as.integer(mdy.date(SettlementDateMonth, SettlementDateDay,
SettlementDateYear))
JTodaysDate
type(UST)
dtype(UST)
View(UST)
USD$JMaturityDate
UST$JMaturityDate
i=1
TDate <- as.integer(UST$JMaturityDate[i])
TDate
JTodaysDate
TYears <- (as.numeric(TDate - JTodaysDate))/365.25
TYears
RoughMaturity
for(i in 1:LengthUST){ # Find first bond in excess of RoughMaturity
TDate <- as.integer(UST$JMaturityDate[i])
TYears <- (as.numeric(TDate - JTodaysDate))/365.25
if(z == FALSE && TYears > RoughMaturity){
SelectedBond <- i
z <- TRUE
}
}
SelectedBond
UST[SelectedBond,] # Console: Selected bond parameters
UST[SelectedBond,] # Console: Selected bond parameters
inputCouponRate <- UST$COUPON[SelectedBond]
inputYieldToMaturity <- UST$ASKED.YIELD[SelectedBond]
inputBondPrice <- (UST$APrice[SelectedBond]/100.0)*inputPar
inputCouponRate <- UST$COUPON[SelectedBond]
inputYieldToMaturity <- UST$ASKED.YIELD[SelectedBond]
inputBondPrice <- (UST$APrice[SelectedBond]/100.0)*inputPar
MaturityDateMonth <- month(as.date(UST$JMaturityDate[SelectedBond]))
MaturityDateDay <- day(as.date(UST$JMaturityDate[SelectedBond]))
UST[SelectedBond,] # Console: Selected bond parameters
inputCouponRate <- UST$COUPON[SelectedBond]
inputYieldToMaturity <- UST$ASKED.YIELD[SelectedBond]
inputBondPrice <- (UST$APrice[SelectedBond]/100.0)*inputPar
MaturityDateMonth <- month(as.date(UST$JMaturityDate[SelectedBond]))
MaturityDateDay <- day(as.date(UST$JMaturityDate[SelectedBond]))
MaturityDateYear <- year(as.date(UST$JMaturityDate[SelectedBond]))
BONDInputData <- list(inputFrequency, inputCouponRate, inputPar,
inputYieldToMaturity, inputBondPrice,
SettlementDateMonth, SettlementDateDay, SettlementDateYear,
MaturityDateMonth, MaturityDateDay, MaturityDateYear)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear")
# Calendar manipulations
N = CouponsRemaining(BONDInputData)
BONDInputData
# Calendar manipulations
N = CouponsRemaining(BONDInputData)
# ElapsedOutput contains fraction, JLastDate, JNextDate, and JCurrentDate
ElapsedOutput = Elapsed(BONDInputData)
# Number of Total Days
NTD <- ElapsedOutput$NextDate - ElapsedOutput$LastDate
# Number of Accrued Days since last semi-annual coupon
NAD <- ElapsedOutput$Fraction * NTD
# Fraction of coupon period that has elapsed already
f <- ElapsedOutput$Fraction
# Bond maturity, in years
Mat <- TimeToMaturity(BONDInputData)
NAD; NTD; f; N; Mat
# Bond value given yield to maturity
MarketQuotedBondPrice <- inputBondPrice
MarketValueOfBond <- BondValue(BONDInputData)
AccruedInterestAmount <- AccruedInterest(BONDInputData)
ModelQuotedBondPrice <- MarketValueOfBond - AccruedInterestAmount
MarketValueOfBond; AccruedInterestAmount;
ModelQuotedBondPrice; MarketQuotedBondPrice
# Yield to maturity given bond value
# Dollars:Quoted price w/o accrued interest
inputBondPrice = MarketQuotedBondPrice
BONDInputData$BondPrice <- inputBondPrice
EstYieldToMaturity = YieldToMaturitySolver(BONDInputData)
EstYieldToMaturity; inputYieldToMaturity
#
# Build zero coupon, annualized, cont. compounded, discount rate curve
#  Inputs: NFactors - Number of factors
#  NBaseCurve - Number of CMTs. MarketCMTRates=int. vector 1 to NBaseCurve
# CMT curve information
#
# Access UST book
source("CMT Inputs.R")
# UST functions (semi-annual only)
source("CMT Functions.R")
NBaseCurve
CMT
#
# Input current CMT yields
#
MarketCMTRates <- numeric(NBaseCurve) # num vector size NBaseCurve, zeros
MarketCMTRates
MarketCMTRates[MarketCMTRates == 0] <- NA # Replace with NAs
MarketCMTRates
#
# Build zero coupon, annualized, cont. compounded, discount rate curve
#  Inputs: NFactors - Number of factors
#  NBaseCurve - Number of CMTs. MarketCMTRates=int. vector 1 to NBaseCurve
# CMT curve information
#
# Access UST book
source("CMT Inputs.R")
# UST functions (semi-annual only)
source("CMT Functions.R")
BONDInputData <- list(inputCMTFrequency, inputCMTCouponRate, inputCMTPar,
inputCMTYieldToMaturity, inputCMTBondPrice,
CMTSettlementDateMonth, CMTSettlementDateDay, CMTSettlementDateYear,
CMTMaturityDateMonth, CMTMaturityDateDay, CMTMaturityDateYear)
names(BONDInputData) <- c("Frequency", "CouponRate", "Par",
"YieldToMaturity", "BondPrice",
"SettlementDateMonth", "SettlementDateDay", "SettlementDateYear",
"MaturityDateMonth", "MaturityDateDay", "MaturityDateYear")
Tau[1] <- TimeToMaturity(BONDInputData) # Set first tau to be maturity
Tau
BONDInputData
# x filled with initial guesses
x <- numeric(NFactors)   # b (Level, slope, and curvatures)
x
if(NTau < 2)Sc <- numeric(1)
Sc
NTau
NFactors
if(NTau>1)Tau[2] <- 3.0
if(NTau>2)Tau[3] <- 6.0
